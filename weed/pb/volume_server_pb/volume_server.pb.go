// Code generated by protoc-gen-go.
// source: volume_server.proto
// DO NOT EDIT!

/*
Package volume_server_pb is a generated protocol buffer package.

It is generated from these files:
	volume_server.proto

It has these top-level messages:
	BatchDeleteRequest
	BatchDeleteResponse
	DeleteResult
	FileGetRequest
	FileGetResponse
	Empty
	VacuumVolumeCheckRequest
	VacuumVolumeCheckResponse
	VacuumVolumeCompactRequest
	VacuumVolumeCompactResponse
	VacuumVolumeCommitRequest
	VacuumVolumeCommitResponse
	VacuumVolumeCleanupRequest
	VacuumVolumeCleanupResponse
	DeleteCollectionRequest
	DeleteCollectionResponse
	AllocateVolumeRequest
	AllocateVolumeResponse
	VolumeSyncStatusRequest
	VolumeSyncStatusResponse
	VolumeIncrementalCopyRequest
	VolumeIncrementalCopyResponse
	VolumeMountRequest
	VolumeMountResponse
	VolumeUnmountRequest
	VolumeUnmountResponse
	VolumeDeleteRequest
	VolumeDeleteResponse
	VolumeMarkReadonlyRequest
	VolumeMarkReadonlyResponse
	VolumeConfigureRequest
	VolumeConfigureResponse
	VolumeCopyRequest
	VolumeCopyResponse
	CopyFileRequest
	CopyFileResponse
	VolumeTailSenderRequest
	VolumeTailSenderResponse
	VolumeTailReceiverRequest
	VolumeTailReceiverResponse
	VolumeEcShardsGenerateRequest
	VolumeEcShardsGenerateResponse
	VolumeEcShardsRebuildRequest
	VolumeEcShardsRebuildResponse
	VolumeEcShardsCopyRequest
	VolumeEcShardsCopyResponse
	VolumeEcShardsDeleteRequest
	VolumeEcShardsDeleteResponse
	VolumeEcShardsMountRequest
	VolumeEcShardsMountResponse
	VolumeEcShardsUnmountRequest
	VolumeEcShardsUnmountResponse
	VolumeEcShardReadRequest
	VolumeEcShardReadResponse
	VolumeEcBlobDeleteRequest
	VolumeEcBlobDeleteResponse
	VolumeEcShardsToVolumeRequest
	VolumeEcShardsToVolumeResponse
	ReadVolumeFileStatusRequest
	ReadVolumeFileStatusResponse
	DiskStatus
	MemStatus
	RemoteFile
	VolumeInfo
	VolumeTierMoveDatToRemoteRequest
	VolumeTierMoveDatToRemoteResponse
	VolumeTierMoveDatFromRemoteRequest
	VolumeTierMoveDatFromRemoteResponse
	VolumeServerStatusRequest
	VolumeServerStatusResponse
	QueryRequest
	QueriedStripe
*/
package volume_server_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BatchDeleteRequest struct {
	FileIds []string `protobuf:"bytes,1,rep,name=file_ids,json=fileIds" json:"file_ids,omitempty"`
}

func (m *BatchDeleteRequest) Reset()                    { *m = BatchDeleteRequest{} }
func (m *BatchDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchDeleteRequest) ProtoMessage()               {}
func (*BatchDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BatchDeleteRequest) GetFileIds() []string {
	if m != nil {
		return m.FileIds
	}
	return nil
}

type BatchDeleteResponse struct {
	Results []*DeleteResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *BatchDeleteResponse) Reset()                    { *m = BatchDeleteResponse{} }
func (m *BatchDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchDeleteResponse) ProtoMessage()               {}
func (*BatchDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BatchDeleteResponse) GetResults() []*DeleteResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type DeleteResult struct {
	FileId  string `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Status  int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Size    uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Version uint32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteResult) Reset()                    { *m = DeleteResult{} }
func (m *DeleteResult) String() string            { return proto.CompactTextString(m) }
func (*DeleteResult) ProtoMessage()               {}
func (*DeleteResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteResult) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *DeleteResult) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DeleteResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DeleteResult) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *DeleteResult) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type FileGetRequest struct {
	FileId     string `protobuf:"bytes,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	AcceptGzip bool   `protobuf:"varint,2,opt,name=accept_gzip,json=acceptGzip" json:"accept_gzip,omitempty"`
}

func (m *FileGetRequest) Reset()                    { *m = FileGetRequest{} }
func (m *FileGetRequest) String() string            { return proto.CompactTextString(m) }
func (*FileGetRequest) ProtoMessage()               {}
func (*FileGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FileGetRequest) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *FileGetRequest) GetAcceptGzip() bool {
	if m != nil {
		return m.AcceptGzip
	}
	return false
}

type FileGetResponse struct {
	Data          []byte            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ContentLength uint32            `protobuf:"varint,2,opt,name=content_length,json=contentLength" json:"content_length,omitempty"`
	ContentType   string            `protobuf:"bytes,3,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	LastModified  uint64            `protobuf:"varint,4,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	Filename      string            `protobuf:"bytes,5,opt,name=filename" json:"filename,omitempty"`
	Etag          string            `protobuf:"bytes,6,opt,name=etag" json:"etag,omitempty"`
	IsGzipped     bool              `protobuf:"varint,7,opt,name=is_gzipped,json=isGzipped" json:"is_gzipped,omitempty"`
	Headers       map[string]string `protobuf:"bytes,8,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ErrorCode     int32             `protobuf:"varint,9,opt,name=errorCode" json:"errorCode,omitempty"`
}

func (m *FileGetResponse) Reset()                    { *m = FileGetResponse{} }
func (m *FileGetResponse) String() string            { return proto.CompactTextString(m) }
func (*FileGetResponse) ProtoMessage()               {}
func (*FileGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FileGetResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileGetResponse) GetContentLength() uint32 {
	if m != nil {
		return m.ContentLength
	}
	return 0
}

func (m *FileGetResponse) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileGetResponse) GetLastModified() uint64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *FileGetResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileGetResponse) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *FileGetResponse) GetIsGzipped() bool {
	if m != nil {
		return m.IsGzipped
	}
	return false
}

func (m *FileGetResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *FileGetResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type VacuumVolumeCheckRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VacuumVolumeCheckRequest) Reset()                    { *m = VacuumVolumeCheckRequest{} }
func (m *VacuumVolumeCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCheckRequest) ProtoMessage()               {}
func (*VacuumVolumeCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VacuumVolumeCheckRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VacuumVolumeCheckResponse struct {
	GarbageRatio float64 `protobuf:"fixed64,1,opt,name=garbage_ratio,json=garbageRatio" json:"garbage_ratio,omitempty"`
}

func (m *VacuumVolumeCheckResponse) Reset()                    { *m = VacuumVolumeCheckResponse{} }
func (m *VacuumVolumeCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCheckResponse) ProtoMessage()               {}
func (*VacuumVolumeCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VacuumVolumeCheckResponse) GetGarbageRatio() float64 {
	if m != nil {
		return m.GarbageRatio
	}
	return 0
}

type VacuumVolumeCompactRequest struct {
	VolumeId    uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Preallocate int64  `protobuf:"varint,2,opt,name=preallocate" json:"preallocate,omitempty"`
}

func (m *VacuumVolumeCompactRequest) Reset()                    { *m = VacuumVolumeCompactRequest{} }
func (m *VacuumVolumeCompactRequest) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCompactRequest) ProtoMessage()               {}
func (*VacuumVolumeCompactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VacuumVolumeCompactRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VacuumVolumeCompactRequest) GetPreallocate() int64 {
	if m != nil {
		return m.Preallocate
	}
	return 0
}

type VacuumVolumeCompactResponse struct {
}

func (m *VacuumVolumeCompactResponse) Reset()                    { *m = VacuumVolumeCompactResponse{} }
func (m *VacuumVolumeCompactResponse) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCompactResponse) ProtoMessage()               {}
func (*VacuumVolumeCompactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type VacuumVolumeCommitRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VacuumVolumeCommitRequest) Reset()                    { *m = VacuumVolumeCommitRequest{} }
func (m *VacuumVolumeCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCommitRequest) ProtoMessage()               {}
func (*VacuumVolumeCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *VacuumVolumeCommitRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VacuumVolumeCommitResponse struct {
	IsReadOnly bool `protobuf:"varint,1,opt,name=is_read_only,json=isReadOnly" json:"is_read_only,omitempty"`
}

func (m *VacuumVolumeCommitResponse) Reset()                    { *m = VacuumVolumeCommitResponse{} }
func (m *VacuumVolumeCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCommitResponse) ProtoMessage()               {}
func (*VacuumVolumeCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *VacuumVolumeCommitResponse) GetIsReadOnly() bool {
	if m != nil {
		return m.IsReadOnly
	}
	return false
}

type VacuumVolumeCleanupRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VacuumVolumeCleanupRequest) Reset()                    { *m = VacuumVolumeCleanupRequest{} }
func (m *VacuumVolumeCleanupRequest) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCleanupRequest) ProtoMessage()               {}
func (*VacuumVolumeCleanupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *VacuumVolumeCleanupRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VacuumVolumeCleanupResponse struct {
}

func (m *VacuumVolumeCleanupResponse) Reset()                    { *m = VacuumVolumeCleanupResponse{} }
func (m *VacuumVolumeCleanupResponse) String() string            { return proto.CompactTextString(m) }
func (*VacuumVolumeCleanupResponse) ProtoMessage()               {}
func (*VacuumVolumeCleanupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type DeleteCollectionRequest struct {
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
}

func (m *DeleteCollectionRequest) Reset()                    { *m = DeleteCollectionRequest{} }
func (m *DeleteCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCollectionRequest) ProtoMessage()               {}
func (*DeleteCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteCollectionRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type DeleteCollectionResponse struct {
}

func (m *DeleteCollectionResponse) Reset()                    { *m = DeleteCollectionResponse{} }
func (m *DeleteCollectionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCollectionResponse) ProtoMessage()               {}
func (*DeleteCollectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type AllocateVolumeRequest struct {
	VolumeId           uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection         string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	Preallocate        int64  `protobuf:"varint,3,opt,name=preallocate" json:"preallocate,omitempty"`
	Replication        string `protobuf:"bytes,4,opt,name=replication" json:"replication,omitempty"`
	Ttl                string `protobuf:"bytes,5,opt,name=ttl" json:"ttl,omitempty"`
	MemoryMapMaxSizeMb uint32 `protobuf:"varint,6,opt,name=memory_map_max_size_mb,json=memoryMapMaxSizeMb" json:"memory_map_max_size_mb,omitempty"`
}

func (m *AllocateVolumeRequest) Reset()                    { *m = AllocateVolumeRequest{} }
func (m *AllocateVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateVolumeRequest) ProtoMessage()               {}
func (*AllocateVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AllocateVolumeRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *AllocateVolumeRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *AllocateVolumeRequest) GetPreallocate() int64 {
	if m != nil {
		return m.Preallocate
	}
	return 0
}

func (m *AllocateVolumeRequest) GetReplication() string {
	if m != nil {
		return m.Replication
	}
	return ""
}

func (m *AllocateVolumeRequest) GetTtl() string {
	if m != nil {
		return m.Ttl
	}
	return ""
}

func (m *AllocateVolumeRequest) GetMemoryMapMaxSizeMb() uint32 {
	if m != nil {
		return m.MemoryMapMaxSizeMb
	}
	return 0
}

type AllocateVolumeResponse struct {
}

func (m *AllocateVolumeResponse) Reset()                    { *m = AllocateVolumeResponse{} }
func (m *AllocateVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateVolumeResponse) ProtoMessage()               {}
func (*AllocateVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type VolumeSyncStatusRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VolumeSyncStatusRequest) Reset()                    { *m = VolumeSyncStatusRequest{} }
func (m *VolumeSyncStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeSyncStatusRequest) ProtoMessage()               {}
func (*VolumeSyncStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *VolumeSyncStatusRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VolumeSyncStatusResponse struct {
	VolumeId        uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection      string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	Replication     string `protobuf:"bytes,4,opt,name=replication" json:"replication,omitempty"`
	Ttl             string `protobuf:"bytes,5,opt,name=ttl" json:"ttl,omitempty"`
	TailOffset      uint64 `protobuf:"varint,6,opt,name=tail_offset,json=tailOffset" json:"tail_offset,omitempty"`
	CompactRevision uint32 `protobuf:"varint,7,opt,name=compact_revision,json=compactRevision" json:"compact_revision,omitempty"`
	IdxFileSize     uint64 `protobuf:"varint,8,opt,name=idx_file_size,json=idxFileSize" json:"idx_file_size,omitempty"`
}

func (m *VolumeSyncStatusResponse) Reset()                    { *m = VolumeSyncStatusResponse{} }
func (m *VolumeSyncStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeSyncStatusResponse) ProtoMessage()               {}
func (*VolumeSyncStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *VolumeSyncStatusResponse) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeSyncStatusResponse) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeSyncStatusResponse) GetReplication() string {
	if m != nil {
		return m.Replication
	}
	return ""
}

func (m *VolumeSyncStatusResponse) GetTtl() string {
	if m != nil {
		return m.Ttl
	}
	return ""
}

func (m *VolumeSyncStatusResponse) GetTailOffset() uint64 {
	if m != nil {
		return m.TailOffset
	}
	return 0
}

func (m *VolumeSyncStatusResponse) GetCompactRevision() uint32 {
	if m != nil {
		return m.CompactRevision
	}
	return 0
}

func (m *VolumeSyncStatusResponse) GetIdxFileSize() uint64 {
	if m != nil {
		return m.IdxFileSize
	}
	return 0
}

type VolumeIncrementalCopyRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	SinceNs  uint64 `protobuf:"varint,2,opt,name=since_ns,json=sinceNs" json:"since_ns,omitempty"`
}

func (m *VolumeIncrementalCopyRequest) Reset()                    { *m = VolumeIncrementalCopyRequest{} }
func (m *VolumeIncrementalCopyRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeIncrementalCopyRequest) ProtoMessage()               {}
func (*VolumeIncrementalCopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *VolumeIncrementalCopyRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeIncrementalCopyRequest) GetSinceNs() uint64 {
	if m != nil {
		return m.SinceNs
	}
	return 0
}

type VolumeIncrementalCopyResponse struct {
	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (m *VolumeIncrementalCopyResponse) Reset()                    { *m = VolumeIncrementalCopyResponse{} }
func (m *VolumeIncrementalCopyResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeIncrementalCopyResponse) ProtoMessage()               {}
func (*VolumeIncrementalCopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *VolumeIncrementalCopyResponse) GetFileContent() []byte {
	if m != nil {
		return m.FileContent
	}
	return nil
}

type VolumeMountRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VolumeMountRequest) Reset()                    { *m = VolumeMountRequest{} }
func (m *VolumeMountRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeMountRequest) ProtoMessage()               {}
func (*VolumeMountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *VolumeMountRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VolumeMountResponse struct {
}

func (m *VolumeMountResponse) Reset()                    { *m = VolumeMountResponse{} }
func (m *VolumeMountResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeMountResponse) ProtoMessage()               {}
func (*VolumeMountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type VolumeUnmountRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VolumeUnmountRequest) Reset()                    { *m = VolumeUnmountRequest{} }
func (m *VolumeUnmountRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeUnmountRequest) ProtoMessage()               {}
func (*VolumeUnmountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *VolumeUnmountRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VolumeUnmountResponse struct {
}

func (m *VolumeUnmountResponse) Reset()                    { *m = VolumeUnmountResponse{} }
func (m *VolumeUnmountResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeUnmountResponse) ProtoMessage()               {}
func (*VolumeUnmountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type VolumeDeleteRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VolumeDeleteRequest) Reset()                    { *m = VolumeDeleteRequest{} }
func (m *VolumeDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeDeleteRequest) ProtoMessage()               {}
func (*VolumeDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *VolumeDeleteRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VolumeDeleteResponse struct {
}

func (m *VolumeDeleteResponse) Reset()                    { *m = VolumeDeleteResponse{} }
func (m *VolumeDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeDeleteResponse) ProtoMessage()               {}
func (*VolumeDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type VolumeMarkReadonlyRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *VolumeMarkReadonlyRequest) Reset()                    { *m = VolumeMarkReadonlyRequest{} }
func (m *VolumeMarkReadonlyRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeMarkReadonlyRequest) ProtoMessage()               {}
func (*VolumeMarkReadonlyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *VolumeMarkReadonlyRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type VolumeMarkReadonlyResponse struct {
}

func (m *VolumeMarkReadonlyResponse) Reset()                    { *m = VolumeMarkReadonlyResponse{} }
func (m *VolumeMarkReadonlyResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeMarkReadonlyResponse) ProtoMessage()               {}
func (*VolumeMarkReadonlyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type VolumeConfigureRequest struct {
	VolumeId    uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Replication string `protobuf:"bytes,2,opt,name=replication" json:"replication,omitempty"`
}

func (m *VolumeConfigureRequest) Reset()                    { *m = VolumeConfigureRequest{} }
func (m *VolumeConfigureRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeConfigureRequest) ProtoMessage()               {}
func (*VolumeConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *VolumeConfigureRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeConfigureRequest) GetReplication() string {
	if m != nil {
		return m.Replication
	}
	return ""
}

type VolumeConfigureResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *VolumeConfigureResponse) Reset()                    { *m = VolumeConfigureResponse{} }
func (m *VolumeConfigureResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeConfigureResponse) ProtoMessage()               {}
func (*VolumeConfigureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *VolumeConfigureResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type VolumeCopyRequest struct {
	VolumeId       uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection     string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	Replication    string `protobuf:"bytes,3,opt,name=replication" json:"replication,omitempty"`
	Ttl            string `protobuf:"bytes,4,opt,name=ttl" json:"ttl,omitempty"`
	SourceDataNode string `protobuf:"bytes,5,opt,name=source_data_node,json=sourceDataNode" json:"source_data_node,omitempty"`
}

func (m *VolumeCopyRequest) Reset()                    { *m = VolumeCopyRequest{} }
func (m *VolumeCopyRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeCopyRequest) ProtoMessage()               {}
func (*VolumeCopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *VolumeCopyRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeCopyRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeCopyRequest) GetReplication() string {
	if m != nil {
		return m.Replication
	}
	return ""
}

func (m *VolumeCopyRequest) GetTtl() string {
	if m != nil {
		return m.Ttl
	}
	return ""
}

func (m *VolumeCopyRequest) GetSourceDataNode() string {
	if m != nil {
		return m.SourceDataNode
	}
	return ""
}

type VolumeCopyResponse struct {
	LastAppendAtNs uint64 `protobuf:"varint,1,opt,name=last_append_at_ns,json=lastAppendAtNs" json:"last_append_at_ns,omitempty"`
}

func (m *VolumeCopyResponse) Reset()                    { *m = VolumeCopyResponse{} }
func (m *VolumeCopyResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeCopyResponse) ProtoMessage()               {}
func (*VolumeCopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *VolumeCopyResponse) GetLastAppendAtNs() uint64 {
	if m != nil {
		return m.LastAppendAtNs
	}
	return 0
}

type CopyFileRequest struct {
	VolumeId                 uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Ext                      string `protobuf:"bytes,2,opt,name=ext" json:"ext,omitempty"`
	CompactionRevision       uint32 `protobuf:"varint,3,opt,name=compaction_revision,json=compactionRevision" json:"compaction_revision,omitempty"`
	StopOffset               uint64 `protobuf:"varint,4,opt,name=stop_offset,json=stopOffset" json:"stop_offset,omitempty"`
	Collection               string `protobuf:"bytes,5,opt,name=collection" json:"collection,omitempty"`
	IsEcVolume               bool   `protobuf:"varint,6,opt,name=is_ec_volume,json=isEcVolume" json:"is_ec_volume,omitempty"`
	IgnoreSourceFileNotFound bool   `protobuf:"varint,7,opt,name=ignore_source_file_not_found,json=ignoreSourceFileNotFound" json:"ignore_source_file_not_found,omitempty"`
}

func (m *CopyFileRequest) Reset()                    { *m = CopyFileRequest{} }
func (m *CopyFileRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyFileRequest) ProtoMessage()               {}
func (*CopyFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CopyFileRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *CopyFileRequest) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *CopyFileRequest) GetCompactionRevision() uint32 {
	if m != nil {
		return m.CompactionRevision
	}
	return 0
}

func (m *CopyFileRequest) GetStopOffset() uint64 {
	if m != nil {
		return m.StopOffset
	}
	return 0
}

func (m *CopyFileRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *CopyFileRequest) GetIsEcVolume() bool {
	if m != nil {
		return m.IsEcVolume
	}
	return false
}

func (m *CopyFileRequest) GetIgnoreSourceFileNotFound() bool {
	if m != nil {
		return m.IgnoreSourceFileNotFound
	}
	return false
}

type CopyFileResponse struct {
	FileContent []byte `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (m *CopyFileResponse) Reset()                    { *m = CopyFileResponse{} }
func (m *CopyFileResponse) String() string            { return proto.CompactTextString(m) }
func (*CopyFileResponse) ProtoMessage()               {}
func (*CopyFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CopyFileResponse) GetFileContent() []byte {
	if m != nil {
		return m.FileContent
	}
	return nil
}

type VolumeTailSenderRequest struct {
	VolumeId           uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	SinceNs            uint64 `protobuf:"varint,2,opt,name=since_ns,json=sinceNs" json:"since_ns,omitempty"`
	IdleTimeoutSeconds uint32 `protobuf:"varint,3,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds" json:"idle_timeout_seconds,omitempty"`
}

func (m *VolumeTailSenderRequest) Reset()                    { *m = VolumeTailSenderRequest{} }
func (m *VolumeTailSenderRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeTailSenderRequest) ProtoMessage()               {}
func (*VolumeTailSenderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *VolumeTailSenderRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeTailSenderRequest) GetSinceNs() uint64 {
	if m != nil {
		return m.SinceNs
	}
	return 0
}

func (m *VolumeTailSenderRequest) GetIdleTimeoutSeconds() uint32 {
	if m != nil {
		return m.IdleTimeoutSeconds
	}
	return 0
}

type VolumeTailSenderResponse struct {
	NeedleHeader []byte `protobuf:"bytes,1,opt,name=needle_header,json=needleHeader,proto3" json:"needle_header,omitempty"`
	NeedleBody   []byte `protobuf:"bytes,2,opt,name=needle_body,json=needleBody,proto3" json:"needle_body,omitempty"`
	IsLastChunk  bool   `protobuf:"varint,3,opt,name=is_last_chunk,json=isLastChunk" json:"is_last_chunk,omitempty"`
}

func (m *VolumeTailSenderResponse) Reset()                    { *m = VolumeTailSenderResponse{} }
func (m *VolumeTailSenderResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeTailSenderResponse) ProtoMessage()               {}
func (*VolumeTailSenderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *VolumeTailSenderResponse) GetNeedleHeader() []byte {
	if m != nil {
		return m.NeedleHeader
	}
	return nil
}

func (m *VolumeTailSenderResponse) GetNeedleBody() []byte {
	if m != nil {
		return m.NeedleBody
	}
	return nil
}

func (m *VolumeTailSenderResponse) GetIsLastChunk() bool {
	if m != nil {
		return m.IsLastChunk
	}
	return false
}

type VolumeTailReceiverRequest struct {
	VolumeId           uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	SinceNs            uint64 `protobuf:"varint,2,opt,name=since_ns,json=sinceNs" json:"since_ns,omitempty"`
	IdleTimeoutSeconds uint32 `protobuf:"varint,3,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds" json:"idle_timeout_seconds,omitempty"`
	SourceVolumeServer string `protobuf:"bytes,4,opt,name=source_volume_server,json=sourceVolumeServer" json:"source_volume_server,omitempty"`
}

func (m *VolumeTailReceiverRequest) Reset()                    { *m = VolumeTailReceiverRequest{} }
func (m *VolumeTailReceiverRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeTailReceiverRequest) ProtoMessage()               {}
func (*VolumeTailReceiverRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *VolumeTailReceiverRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeTailReceiverRequest) GetSinceNs() uint64 {
	if m != nil {
		return m.SinceNs
	}
	return 0
}

func (m *VolumeTailReceiverRequest) GetIdleTimeoutSeconds() uint32 {
	if m != nil {
		return m.IdleTimeoutSeconds
	}
	return 0
}

func (m *VolumeTailReceiverRequest) GetSourceVolumeServer() string {
	if m != nil {
		return m.SourceVolumeServer
	}
	return ""
}

type VolumeTailReceiverResponse struct {
}

func (m *VolumeTailReceiverResponse) Reset()                    { *m = VolumeTailReceiverResponse{} }
func (m *VolumeTailReceiverResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeTailReceiverResponse) ProtoMessage()               {}
func (*VolumeTailReceiverResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type VolumeEcShardsGenerateRequest struct {
	VolumeId   uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
}

func (m *VolumeEcShardsGenerateRequest) Reset()                    { *m = VolumeEcShardsGenerateRequest{} }
func (m *VolumeEcShardsGenerateRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsGenerateRequest) ProtoMessage()               {}
func (*VolumeEcShardsGenerateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *VolumeEcShardsGenerateRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsGenerateRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type VolumeEcShardsGenerateResponse struct {
}

func (m *VolumeEcShardsGenerateResponse) Reset()         { *m = VolumeEcShardsGenerateResponse{} }
func (m *VolumeEcShardsGenerateResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeEcShardsGenerateResponse) ProtoMessage()    {}
func (*VolumeEcShardsGenerateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

type VolumeEcShardsRebuildRequest struct {
	VolumeId   uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
}

func (m *VolumeEcShardsRebuildRequest) Reset()                    { *m = VolumeEcShardsRebuildRequest{} }
func (m *VolumeEcShardsRebuildRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsRebuildRequest) ProtoMessage()               {}
func (*VolumeEcShardsRebuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *VolumeEcShardsRebuildRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsRebuildRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type VolumeEcShardsRebuildResponse struct {
	RebuiltShardIds []uint32 `protobuf:"varint,1,rep,packed,name=rebuilt_shard_ids,json=rebuiltShardIds" json:"rebuilt_shard_ids,omitempty"`
}

func (m *VolumeEcShardsRebuildResponse) Reset()                    { *m = VolumeEcShardsRebuildResponse{} }
func (m *VolumeEcShardsRebuildResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsRebuildResponse) ProtoMessage()               {}
func (*VolumeEcShardsRebuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *VolumeEcShardsRebuildResponse) GetRebuiltShardIds() []uint32 {
	if m != nil {
		return m.RebuiltShardIds
	}
	return nil
}

type VolumeEcShardsCopyRequest struct {
	VolumeId       uint32   `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection     string   `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	ShardIds       []uint32 `protobuf:"varint,3,rep,packed,name=shard_ids,json=shardIds" json:"shard_ids,omitempty"`
	CopyEcxFile    bool     `protobuf:"varint,4,opt,name=copy_ecx_file,json=copyEcxFile" json:"copy_ecx_file,omitempty"`
	SourceDataNode string   `protobuf:"bytes,5,opt,name=source_data_node,json=sourceDataNode" json:"source_data_node,omitempty"`
	CopyEcjFile    bool     `protobuf:"varint,6,opt,name=copy_ecj_file,json=copyEcjFile" json:"copy_ecj_file,omitempty"`
	CopyVifFile    bool     `protobuf:"varint,7,opt,name=copy_vif_file,json=copyVifFile" json:"copy_vif_file,omitempty"`
}

func (m *VolumeEcShardsCopyRequest) Reset()                    { *m = VolumeEcShardsCopyRequest{} }
func (m *VolumeEcShardsCopyRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsCopyRequest) ProtoMessage()               {}
func (*VolumeEcShardsCopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *VolumeEcShardsCopyRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsCopyRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeEcShardsCopyRequest) GetShardIds() []uint32 {
	if m != nil {
		return m.ShardIds
	}
	return nil
}

func (m *VolumeEcShardsCopyRequest) GetCopyEcxFile() bool {
	if m != nil {
		return m.CopyEcxFile
	}
	return false
}

func (m *VolumeEcShardsCopyRequest) GetSourceDataNode() string {
	if m != nil {
		return m.SourceDataNode
	}
	return ""
}

func (m *VolumeEcShardsCopyRequest) GetCopyEcjFile() bool {
	if m != nil {
		return m.CopyEcjFile
	}
	return false
}

func (m *VolumeEcShardsCopyRequest) GetCopyVifFile() bool {
	if m != nil {
		return m.CopyVifFile
	}
	return false
}

type VolumeEcShardsCopyResponse struct {
}

func (m *VolumeEcShardsCopyResponse) Reset()                    { *m = VolumeEcShardsCopyResponse{} }
func (m *VolumeEcShardsCopyResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsCopyResponse) ProtoMessage()               {}
func (*VolumeEcShardsCopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type VolumeEcShardsDeleteRequest struct {
	VolumeId   uint32   `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection string   `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	ShardIds   []uint32 `protobuf:"varint,3,rep,packed,name=shard_ids,json=shardIds" json:"shard_ids,omitempty"`
}

func (m *VolumeEcShardsDeleteRequest) Reset()                    { *m = VolumeEcShardsDeleteRequest{} }
func (m *VolumeEcShardsDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsDeleteRequest) ProtoMessage()               {}
func (*VolumeEcShardsDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *VolumeEcShardsDeleteRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsDeleteRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeEcShardsDeleteRequest) GetShardIds() []uint32 {
	if m != nil {
		return m.ShardIds
	}
	return nil
}

type VolumeEcShardsDeleteResponse struct {
}

func (m *VolumeEcShardsDeleteResponse) Reset()                    { *m = VolumeEcShardsDeleteResponse{} }
func (m *VolumeEcShardsDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsDeleteResponse) ProtoMessage()               {}
func (*VolumeEcShardsDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type VolumeEcShardsMountRequest struct {
	VolumeId   uint32   `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection string   `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	ShardIds   []uint32 `protobuf:"varint,3,rep,packed,name=shard_ids,json=shardIds" json:"shard_ids,omitempty"`
}

func (m *VolumeEcShardsMountRequest) Reset()                    { *m = VolumeEcShardsMountRequest{} }
func (m *VolumeEcShardsMountRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsMountRequest) ProtoMessage()               {}
func (*VolumeEcShardsMountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *VolumeEcShardsMountRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsMountRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeEcShardsMountRequest) GetShardIds() []uint32 {
	if m != nil {
		return m.ShardIds
	}
	return nil
}

type VolumeEcShardsMountResponse struct {
}

func (m *VolumeEcShardsMountResponse) Reset()                    { *m = VolumeEcShardsMountResponse{} }
func (m *VolumeEcShardsMountResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsMountResponse) ProtoMessage()               {}
func (*VolumeEcShardsMountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

type VolumeEcShardsUnmountRequest struct {
	VolumeId uint32   `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	ShardIds []uint32 `protobuf:"varint,3,rep,packed,name=shard_ids,json=shardIds" json:"shard_ids,omitempty"`
}

func (m *VolumeEcShardsUnmountRequest) Reset()                    { *m = VolumeEcShardsUnmountRequest{} }
func (m *VolumeEcShardsUnmountRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsUnmountRequest) ProtoMessage()               {}
func (*VolumeEcShardsUnmountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *VolumeEcShardsUnmountRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsUnmountRequest) GetShardIds() []uint32 {
	if m != nil {
		return m.ShardIds
	}
	return nil
}

type VolumeEcShardsUnmountResponse struct {
}

func (m *VolumeEcShardsUnmountResponse) Reset()                    { *m = VolumeEcShardsUnmountResponse{} }
func (m *VolumeEcShardsUnmountResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsUnmountResponse) ProtoMessage()               {}
func (*VolumeEcShardsUnmountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

type VolumeEcShardReadRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	ShardId  uint32 `protobuf:"varint,2,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	Offset   int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Size     int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	FileKey  uint64 `protobuf:"varint,5,opt,name=file_key,json=fileKey" json:"file_key,omitempty"`
}

func (m *VolumeEcShardReadRequest) Reset()                    { *m = VolumeEcShardReadRequest{} }
func (m *VolumeEcShardReadRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardReadRequest) ProtoMessage()               {}
func (*VolumeEcShardReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *VolumeEcShardReadRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardReadRequest) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *VolumeEcShardReadRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *VolumeEcShardReadRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *VolumeEcShardReadRequest) GetFileKey() uint64 {
	if m != nil {
		return m.FileKey
	}
	return 0
}

type VolumeEcShardReadResponse struct {
	Data      []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	IsDeleted bool   `protobuf:"varint,2,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
}

func (m *VolumeEcShardReadResponse) Reset()                    { *m = VolumeEcShardReadResponse{} }
func (m *VolumeEcShardReadResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardReadResponse) ProtoMessage()               {}
func (*VolumeEcShardReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *VolumeEcShardReadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VolumeEcShardReadResponse) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

type VolumeEcBlobDeleteRequest struct {
	VolumeId   uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	FileKey    uint64 `protobuf:"varint,3,opt,name=file_key,json=fileKey" json:"file_key,omitempty"`
	Version    uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (m *VolumeEcBlobDeleteRequest) Reset()                    { *m = VolumeEcBlobDeleteRequest{} }
func (m *VolumeEcBlobDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcBlobDeleteRequest) ProtoMessage()               {}
func (*VolumeEcBlobDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *VolumeEcBlobDeleteRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcBlobDeleteRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeEcBlobDeleteRequest) GetFileKey() uint64 {
	if m != nil {
		return m.FileKey
	}
	return 0
}

func (m *VolumeEcBlobDeleteRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type VolumeEcBlobDeleteResponse struct {
}

func (m *VolumeEcBlobDeleteResponse) Reset()                    { *m = VolumeEcBlobDeleteResponse{} }
func (m *VolumeEcBlobDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcBlobDeleteResponse) ProtoMessage()               {}
func (*VolumeEcBlobDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

type VolumeEcShardsToVolumeRequest struct {
	VolumeId   uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
}

func (m *VolumeEcShardsToVolumeRequest) Reset()                    { *m = VolumeEcShardsToVolumeRequest{} }
func (m *VolumeEcShardsToVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeEcShardsToVolumeRequest) ProtoMessage()               {}
func (*VolumeEcShardsToVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *VolumeEcShardsToVolumeRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeEcShardsToVolumeRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type VolumeEcShardsToVolumeResponse struct {
}

func (m *VolumeEcShardsToVolumeResponse) Reset()         { *m = VolumeEcShardsToVolumeResponse{} }
func (m *VolumeEcShardsToVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeEcShardsToVolumeResponse) ProtoMessage()    {}
func (*VolumeEcShardsToVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{57}
}

type ReadVolumeFileStatusRequest struct {
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
}

func (m *ReadVolumeFileStatusRequest) Reset()                    { *m = ReadVolumeFileStatusRequest{} }
func (m *ReadVolumeFileStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadVolumeFileStatusRequest) ProtoMessage()               {}
func (*ReadVolumeFileStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *ReadVolumeFileStatusRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

type ReadVolumeFileStatusResponse struct {
	VolumeId                uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	IdxFileTimestampSeconds uint64 `protobuf:"varint,2,opt,name=idx_file_timestamp_seconds,json=idxFileTimestampSeconds" json:"idx_file_timestamp_seconds,omitempty"`
	IdxFileSize             uint64 `protobuf:"varint,3,opt,name=idx_file_size,json=idxFileSize" json:"idx_file_size,omitempty"`
	DatFileTimestampSeconds uint64 `protobuf:"varint,4,opt,name=dat_file_timestamp_seconds,json=datFileTimestampSeconds" json:"dat_file_timestamp_seconds,omitempty"`
	DatFileSize             uint64 `protobuf:"varint,5,opt,name=dat_file_size,json=datFileSize" json:"dat_file_size,omitempty"`
	FileCount               uint64 `protobuf:"varint,6,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`
	CompactionRevision      uint32 `protobuf:"varint,7,opt,name=compaction_revision,json=compactionRevision" json:"compaction_revision,omitempty"`
	Collection              string `protobuf:"bytes,8,opt,name=collection" json:"collection,omitempty"`
}

func (m *ReadVolumeFileStatusResponse) Reset()                    { *m = ReadVolumeFileStatusResponse{} }
func (m *ReadVolumeFileStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadVolumeFileStatusResponse) ProtoMessage()               {}
func (*ReadVolumeFileStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *ReadVolumeFileStatusResponse) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetIdxFileTimestampSeconds() uint64 {
	if m != nil {
		return m.IdxFileTimestampSeconds
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetIdxFileSize() uint64 {
	if m != nil {
		return m.IdxFileSize
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetDatFileTimestampSeconds() uint64 {
	if m != nil {
		return m.DatFileTimestampSeconds
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetDatFileSize() uint64 {
	if m != nil {
		return m.DatFileSize
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetFileCount() uint64 {
	if m != nil {
		return m.FileCount
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetCompactionRevision() uint32 {
	if m != nil {
		return m.CompactionRevision
	}
	return 0
}

func (m *ReadVolumeFileStatusResponse) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type DiskStatus struct {
	Dir         string  `protobuf:"bytes,1,opt,name=dir" json:"dir,omitempty"`
	All         uint64  `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
	Used        uint64  `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Free        uint64  `protobuf:"varint,4,opt,name=free" json:"free,omitempty"`
	PercentFree float32 `protobuf:"fixed32,5,opt,name=percent_free,json=percentFree" json:"percent_free,omitempty"`
	PercentUsed float32 `protobuf:"fixed32,6,opt,name=percent_used,json=percentUsed" json:"percent_used,omitempty"`
}

func (m *DiskStatus) Reset()                    { *m = DiskStatus{} }
func (m *DiskStatus) String() string            { return proto.CompactTextString(m) }
func (*DiskStatus) ProtoMessage()               {}
func (*DiskStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *DiskStatus) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *DiskStatus) GetAll() uint64 {
	if m != nil {
		return m.All
	}
	return 0
}

func (m *DiskStatus) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *DiskStatus) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *DiskStatus) GetPercentFree() float32 {
	if m != nil {
		return m.PercentFree
	}
	return 0
}

func (m *DiskStatus) GetPercentUsed() float32 {
	if m != nil {
		return m.PercentUsed
	}
	return 0
}

type MemStatus struct {
	Goroutines int32  `protobuf:"varint,1,opt,name=goroutines" json:"goroutines,omitempty"`
	All        uint64 `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
	Used       uint64 `protobuf:"varint,3,opt,name=used" json:"used,omitempty"`
	Free       uint64 `protobuf:"varint,4,opt,name=free" json:"free,omitempty"`
	Self       uint64 `protobuf:"varint,5,opt,name=self" json:"self,omitempty"`
	Heap       uint64 `protobuf:"varint,6,opt,name=heap" json:"heap,omitempty"`
	Stack      uint64 `protobuf:"varint,7,opt,name=stack" json:"stack,omitempty"`
}

func (m *MemStatus) Reset()                    { *m = MemStatus{} }
func (m *MemStatus) String() string            { return proto.CompactTextString(m) }
func (*MemStatus) ProtoMessage()               {}
func (*MemStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *MemStatus) GetGoroutines() int32 {
	if m != nil {
		return m.Goroutines
	}
	return 0
}

func (m *MemStatus) GetAll() uint64 {
	if m != nil {
		return m.All
	}
	return 0
}

func (m *MemStatus) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemStatus) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *MemStatus) GetSelf() uint64 {
	if m != nil {
		return m.Self
	}
	return 0
}

func (m *MemStatus) GetHeap() uint64 {
	if m != nil {
		return m.Heap
	}
	return 0
}

func (m *MemStatus) GetStack() uint64 {
	if m != nil {
		return m.Stack
	}
	return 0
}

// tired storage on volume servers
type RemoteFile struct {
	BackendType  string `protobuf:"bytes,1,opt,name=backend_type,json=backendType" json:"backend_type,omitempty"`
	BackendId    string `protobuf:"bytes,2,opt,name=backend_id,json=backendId" json:"backend_id,omitempty"`
	Key          string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Offset       uint64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	FileSize     uint64 `protobuf:"varint,5,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	ModifiedTime uint64 `protobuf:"varint,6,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	Extension    string `protobuf:"bytes,7,opt,name=extension" json:"extension,omitempty"`
}

func (m *RemoteFile) Reset()                    { *m = RemoteFile{} }
func (m *RemoteFile) String() string            { return proto.CompactTextString(m) }
func (*RemoteFile) ProtoMessage()               {}
func (*RemoteFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *RemoteFile) GetBackendType() string {
	if m != nil {
		return m.BackendType
	}
	return ""
}

func (m *RemoteFile) GetBackendId() string {
	if m != nil {
		return m.BackendId
	}
	return ""
}

func (m *RemoteFile) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RemoteFile) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RemoteFile) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *RemoteFile) GetModifiedTime() uint64 {
	if m != nil {
		return m.ModifiedTime
	}
	return 0
}

func (m *RemoteFile) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

type VolumeInfo struct {
	Files       []*RemoteFile `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	Version     uint32        `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Replication string        `protobuf:"bytes,3,opt,name=replication" json:"replication,omitempty"`
}

func (m *VolumeInfo) Reset()                    { *m = VolumeInfo{} }
func (m *VolumeInfo) String() string            { return proto.CompactTextString(m) }
func (*VolumeInfo) ProtoMessage()               {}
func (*VolumeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *VolumeInfo) GetFiles() []*RemoteFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *VolumeInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VolumeInfo) GetReplication() string {
	if m != nil {
		return m.Replication
	}
	return ""
}

type VolumeTierMoveDatToRemoteRequest struct {
	VolumeId               uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection             string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	DestinationBackendName string `protobuf:"bytes,3,opt,name=destination_backend_name,json=destinationBackendName" json:"destination_backend_name,omitempty"`
	KeepLocalDatFile       bool   `protobuf:"varint,4,opt,name=keep_local_dat_file,json=keepLocalDatFile" json:"keep_local_dat_file,omitempty"`
}

func (m *VolumeTierMoveDatToRemoteRequest) Reset()         { *m = VolumeTierMoveDatToRemoteRequest{} }
func (m *VolumeTierMoveDatToRemoteRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeTierMoveDatToRemoteRequest) ProtoMessage()    {}
func (*VolumeTierMoveDatToRemoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{64}
}

func (m *VolumeTierMoveDatToRemoteRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeTierMoveDatToRemoteRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeTierMoveDatToRemoteRequest) GetDestinationBackendName() string {
	if m != nil {
		return m.DestinationBackendName
	}
	return ""
}

func (m *VolumeTierMoveDatToRemoteRequest) GetKeepLocalDatFile() bool {
	if m != nil {
		return m.KeepLocalDatFile
	}
	return false
}

type VolumeTierMoveDatToRemoteResponse struct {
	Processed           int64   `protobuf:"varint,1,opt,name=processed" json:"processed,omitempty"`
	ProcessedPercentage float32 `protobuf:"fixed32,2,opt,name=processedPercentage" json:"processedPercentage,omitempty"`
}

func (m *VolumeTierMoveDatToRemoteResponse) Reset()         { *m = VolumeTierMoveDatToRemoteResponse{} }
func (m *VolumeTierMoveDatToRemoteResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeTierMoveDatToRemoteResponse) ProtoMessage()    {}
func (*VolumeTierMoveDatToRemoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{65}
}

func (m *VolumeTierMoveDatToRemoteResponse) GetProcessed() int64 {
	if m != nil {
		return m.Processed
	}
	return 0
}

func (m *VolumeTierMoveDatToRemoteResponse) GetProcessedPercentage() float32 {
	if m != nil {
		return m.ProcessedPercentage
	}
	return 0
}

type VolumeTierMoveDatFromRemoteRequest struct {
	VolumeId          uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	Collection        string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	KeepRemoteDatFile bool   `protobuf:"varint,3,opt,name=keep_remote_dat_file,json=keepRemoteDatFile" json:"keep_remote_dat_file,omitempty"`
}

func (m *VolumeTierMoveDatFromRemoteRequest) Reset()         { *m = VolumeTierMoveDatFromRemoteRequest{} }
func (m *VolumeTierMoveDatFromRemoteRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeTierMoveDatFromRemoteRequest) ProtoMessage()    {}
func (*VolumeTierMoveDatFromRemoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{66}
}

func (m *VolumeTierMoveDatFromRemoteRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeTierMoveDatFromRemoteRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *VolumeTierMoveDatFromRemoteRequest) GetKeepRemoteDatFile() bool {
	if m != nil {
		return m.KeepRemoteDatFile
	}
	return false
}

type VolumeTierMoveDatFromRemoteResponse struct {
	Processed           int64   `protobuf:"varint,1,opt,name=processed" json:"processed,omitempty"`
	ProcessedPercentage float32 `protobuf:"fixed32,2,opt,name=processedPercentage" json:"processedPercentage,omitempty"`
}

func (m *VolumeTierMoveDatFromRemoteResponse) Reset()         { *m = VolumeTierMoveDatFromRemoteResponse{} }
func (m *VolumeTierMoveDatFromRemoteResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeTierMoveDatFromRemoteResponse) ProtoMessage()    {}
func (*VolumeTierMoveDatFromRemoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67}
}

func (m *VolumeTierMoveDatFromRemoteResponse) GetProcessed() int64 {
	if m != nil {
		return m.Processed
	}
	return 0
}

func (m *VolumeTierMoveDatFromRemoteResponse) GetProcessedPercentage() float32 {
	if m != nil {
		return m.ProcessedPercentage
	}
	return 0
}

type VolumeServerStatusRequest struct {
}

func (m *VolumeServerStatusRequest) Reset()                    { *m = VolumeServerStatusRequest{} }
func (m *VolumeServerStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeServerStatusRequest) ProtoMessage()               {}
func (*VolumeServerStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

type VolumeServerStatusResponse struct {
	DiskStatuses []*DiskStatus `protobuf:"bytes,1,rep,name=disk_statuses,json=diskStatuses" json:"disk_statuses,omitempty"`
	MemoryStatus *MemStatus    `protobuf:"bytes,2,opt,name=memory_status,json=memoryStatus" json:"memory_status,omitempty"`
}

func (m *VolumeServerStatusResponse) Reset()                    { *m = VolumeServerStatusResponse{} }
func (m *VolumeServerStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumeServerStatusResponse) ProtoMessage()               {}
func (*VolumeServerStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *VolumeServerStatusResponse) GetDiskStatuses() []*DiskStatus {
	if m != nil {
		return m.DiskStatuses
	}
	return nil
}

func (m *VolumeServerStatusResponse) GetMemoryStatus() *MemStatus {
	if m != nil {
		return m.MemoryStatus
	}
	return nil
}

// select on volume servers
type QueryRequest struct {
	Selections          []string                          `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty"`
	FromFileIds         []string                          `protobuf:"bytes,2,rep,name=from_file_ids,json=fromFileIds" json:"from_file_ids,omitempty"`
	Filter              *QueryRequest_Filter              `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
	InputSerialization  *QueryRequest_InputSerialization  `protobuf:"bytes,4,opt,name=input_serialization,json=inputSerialization" json:"input_serialization,omitempty"`
	OutputSerialization *QueryRequest_OutputSerialization `protobuf:"bytes,5,opt,name=output_serialization,json=outputSerialization" json:"output_serialization,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *QueryRequest) GetSelections() []string {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *QueryRequest) GetFromFileIds() []string {
	if m != nil {
		return m.FromFileIds
	}
	return nil
}

func (m *QueryRequest) GetFilter() *QueryRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *QueryRequest) GetInputSerialization() *QueryRequest_InputSerialization {
	if m != nil {
		return m.InputSerialization
	}
	return nil
}

func (m *QueryRequest) GetOutputSerialization() *QueryRequest_OutputSerialization {
	if m != nil {
		return m.OutputSerialization
	}
	return nil
}

type QueryRequest_Filter struct {
	Field   string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Operand string `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *QueryRequest_Filter) Reset()                    { *m = QueryRequest_Filter{} }
func (m *QueryRequest_Filter) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest_Filter) ProtoMessage()               {}
func (*QueryRequest_Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70, 0} }

func (m *QueryRequest_Filter) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *QueryRequest_Filter) GetOperand() string {
	if m != nil {
		return m.Operand
	}
	return ""
}

func (m *QueryRequest_Filter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryRequest_InputSerialization struct {
	// NONE | GZIP | BZIP2
	CompressionType string                                        `protobuf:"bytes,1,opt,name=compression_type,json=compressionType" json:"compression_type,omitempty"`
	CsvInput        *QueryRequest_InputSerialization_CSVInput     `protobuf:"bytes,2,opt,name=csv_input,json=csvInput" json:"csv_input,omitempty"`
	JsonInput       *QueryRequest_InputSerialization_JSONInput    `protobuf:"bytes,3,opt,name=json_input,json=jsonInput" json:"json_input,omitempty"`
	ParquetInput    *QueryRequest_InputSerialization_ParquetInput `protobuf:"bytes,4,opt,name=parquet_input,json=parquetInput" json:"parquet_input,omitempty"`
}

func (m *QueryRequest_InputSerialization) Reset()         { *m = QueryRequest_InputSerialization{} }
func (m *QueryRequest_InputSerialization) String() string { return proto.CompactTextString(m) }
func (*QueryRequest_InputSerialization) ProtoMessage()    {}
func (*QueryRequest_InputSerialization) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 1}
}

func (m *QueryRequest_InputSerialization) GetCompressionType() string {
	if m != nil {
		return m.CompressionType
	}
	return ""
}

func (m *QueryRequest_InputSerialization) GetCsvInput() *QueryRequest_InputSerialization_CSVInput {
	if m != nil {
		return m.CsvInput
	}
	return nil
}

func (m *QueryRequest_InputSerialization) GetJsonInput() *QueryRequest_InputSerialization_JSONInput {
	if m != nil {
		return m.JsonInput
	}
	return nil
}

func (m *QueryRequest_InputSerialization) GetParquetInput() *QueryRequest_InputSerialization_ParquetInput {
	if m != nil {
		return m.ParquetInput
	}
	return nil
}

type QueryRequest_InputSerialization_CSVInput struct {
	FileHeaderInfo       string `protobuf:"bytes,1,opt,name=file_header_info,json=fileHeaderInfo" json:"file_header_info,omitempty"`
	RecordDelimiter      string `protobuf:"bytes,2,opt,name=record_delimiter,json=recordDelimiter" json:"record_delimiter,omitempty"`
	FieldDelimiter       string `protobuf:"bytes,3,opt,name=field_delimiter,json=fieldDelimiter" json:"field_delimiter,omitempty"`
	QuoteCharactoer      string `protobuf:"bytes,4,opt,name=quote_charactoer,json=quoteCharactoer" json:"quote_charactoer,omitempty"`
	QuoteEscapeCharacter string `protobuf:"bytes,5,opt,name=quote_escape_character,json=quoteEscapeCharacter" json:"quote_escape_character,omitempty"`
	Comments             string `protobuf:"bytes,6,opt,name=comments" json:"comments,omitempty"`
	// If true, records might contain record delimiters within quote characters
	AllowQuotedRecordDelimiter bool `protobuf:"varint,7,opt,name=allow_quoted_record_delimiter,json=allowQuotedRecordDelimiter" json:"allow_quoted_record_delimiter,omitempty"`
}

func (m *QueryRequest_InputSerialization_CSVInput) Reset() {
	*m = QueryRequest_InputSerialization_CSVInput{}
}
func (m *QueryRequest_InputSerialization_CSVInput) String() string { return proto.CompactTextString(m) }
func (*QueryRequest_InputSerialization_CSVInput) ProtoMessage()    {}
func (*QueryRequest_InputSerialization_CSVInput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 1, 0}
}

func (m *QueryRequest_InputSerialization_CSVInput) GetFileHeaderInfo() string {
	if m != nil {
		return m.FileHeaderInfo
	}
	return ""
}

func (m *QueryRequest_InputSerialization_CSVInput) GetRecordDelimiter() string {
	if m != nil {
		return m.RecordDelimiter
	}
	return ""
}

func (m *QueryRequest_InputSerialization_CSVInput) GetFieldDelimiter() string {
	if m != nil {
		return m.FieldDelimiter
	}
	return ""
}

func (m *QueryRequest_InputSerialization_CSVInput) GetQuoteCharactoer() string {
	if m != nil {
		return m.QuoteCharactoer
	}
	return ""
}

func (m *QueryRequest_InputSerialization_CSVInput) GetQuoteEscapeCharacter() string {
	if m != nil {
		return m.QuoteEscapeCharacter
	}
	return ""
}

func (m *QueryRequest_InputSerialization_CSVInput) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *QueryRequest_InputSerialization_CSVInput) GetAllowQuotedRecordDelimiter() bool {
	if m != nil {
		return m.AllowQuotedRecordDelimiter
	}
	return false
}

type QueryRequest_InputSerialization_JSONInput struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *QueryRequest_InputSerialization_JSONInput) Reset() {
	*m = QueryRequest_InputSerialization_JSONInput{}
}
func (m *QueryRequest_InputSerialization_JSONInput) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRequest_InputSerialization_JSONInput) ProtoMessage() {}
func (*QueryRequest_InputSerialization_JSONInput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 1, 1}
}

func (m *QueryRequest_InputSerialization_JSONInput) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type QueryRequest_InputSerialization_ParquetInput struct {
}

func (m *QueryRequest_InputSerialization_ParquetInput) Reset() {
	*m = QueryRequest_InputSerialization_ParquetInput{}
}
func (m *QueryRequest_InputSerialization_ParquetInput) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRequest_InputSerialization_ParquetInput) ProtoMessage() {}
func (*QueryRequest_InputSerialization_ParquetInput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 1, 2}
}

type QueryRequest_OutputSerialization struct {
	CsvOutput  *QueryRequest_OutputSerialization_CSVOutput  `protobuf:"bytes,2,opt,name=csv_output,json=csvOutput" json:"csv_output,omitempty"`
	JsonOutput *QueryRequest_OutputSerialization_JSONOutput `protobuf:"bytes,3,opt,name=json_output,json=jsonOutput" json:"json_output,omitempty"`
}

func (m *QueryRequest_OutputSerialization) Reset()         { *m = QueryRequest_OutputSerialization{} }
func (m *QueryRequest_OutputSerialization) String() string { return proto.CompactTextString(m) }
func (*QueryRequest_OutputSerialization) ProtoMessage()    {}
func (*QueryRequest_OutputSerialization) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 2}
}

func (m *QueryRequest_OutputSerialization) GetCsvOutput() *QueryRequest_OutputSerialization_CSVOutput {
	if m != nil {
		return m.CsvOutput
	}
	return nil
}

func (m *QueryRequest_OutputSerialization) GetJsonOutput() *QueryRequest_OutputSerialization_JSONOutput {
	if m != nil {
		return m.JsonOutput
	}
	return nil
}

type QueryRequest_OutputSerialization_CSVOutput struct {
	QuoteFields          string `protobuf:"bytes,1,opt,name=quote_fields,json=quoteFields" json:"quote_fields,omitempty"`
	RecordDelimiter      string `protobuf:"bytes,2,opt,name=record_delimiter,json=recordDelimiter" json:"record_delimiter,omitempty"`
	FieldDelimiter       string `protobuf:"bytes,3,opt,name=field_delimiter,json=fieldDelimiter" json:"field_delimiter,omitempty"`
	QuoteCharactoer      string `protobuf:"bytes,4,opt,name=quote_charactoer,json=quoteCharactoer" json:"quote_charactoer,omitempty"`
	QuoteEscapeCharacter string `protobuf:"bytes,5,opt,name=quote_escape_character,json=quoteEscapeCharacter" json:"quote_escape_character,omitempty"`
}

func (m *QueryRequest_OutputSerialization_CSVOutput) Reset() {
	*m = QueryRequest_OutputSerialization_CSVOutput{}
}
func (m *QueryRequest_OutputSerialization_CSVOutput) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRequest_OutputSerialization_CSVOutput) ProtoMessage() {}
func (*QueryRequest_OutputSerialization_CSVOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 2, 0}
}

func (m *QueryRequest_OutputSerialization_CSVOutput) GetQuoteFields() string {
	if m != nil {
		return m.QuoteFields
	}
	return ""
}

func (m *QueryRequest_OutputSerialization_CSVOutput) GetRecordDelimiter() string {
	if m != nil {
		return m.RecordDelimiter
	}
	return ""
}

func (m *QueryRequest_OutputSerialization_CSVOutput) GetFieldDelimiter() string {
	if m != nil {
		return m.FieldDelimiter
	}
	return ""
}

func (m *QueryRequest_OutputSerialization_CSVOutput) GetQuoteCharactoer() string {
	if m != nil {
		return m.QuoteCharactoer
	}
	return ""
}

func (m *QueryRequest_OutputSerialization_CSVOutput) GetQuoteEscapeCharacter() string {
	if m != nil {
		return m.QuoteEscapeCharacter
	}
	return ""
}

type QueryRequest_OutputSerialization_JSONOutput struct {
	RecordDelimiter string `protobuf:"bytes,1,opt,name=record_delimiter,json=recordDelimiter" json:"record_delimiter,omitempty"`
}

func (m *QueryRequest_OutputSerialization_JSONOutput) Reset() {
	*m = QueryRequest_OutputSerialization_JSONOutput{}
}
func (m *QueryRequest_OutputSerialization_JSONOutput) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRequest_OutputSerialization_JSONOutput) ProtoMessage() {}
func (*QueryRequest_OutputSerialization_JSONOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{70, 2, 1}
}

func (m *QueryRequest_OutputSerialization_JSONOutput) GetRecordDelimiter() string {
	if m != nil {
		return m.RecordDelimiter
	}
	return ""
}

type QueriedStripe struct {
	Records []byte `protobuf:"bytes,1,opt,name=records,proto3" json:"records,omitempty"`
}

func (m *QueriedStripe) Reset()                    { *m = QueriedStripe{} }
func (m *QueriedStripe) String() string            { return proto.CompactTextString(m) }
func (*QueriedStripe) ProtoMessage()               {}
func (*QueriedStripe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *QueriedStripe) GetRecords() []byte {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*BatchDeleteRequest)(nil), "volume_server_pb.BatchDeleteRequest")
	proto.RegisterType((*BatchDeleteResponse)(nil), "volume_server_pb.BatchDeleteResponse")
	proto.RegisterType((*DeleteResult)(nil), "volume_server_pb.DeleteResult")
	proto.RegisterType((*FileGetRequest)(nil), "volume_server_pb.FileGetRequest")
	proto.RegisterType((*FileGetResponse)(nil), "volume_server_pb.FileGetResponse")
	proto.RegisterType((*Empty)(nil), "volume_server_pb.Empty")
	proto.RegisterType((*VacuumVolumeCheckRequest)(nil), "volume_server_pb.VacuumVolumeCheckRequest")
	proto.RegisterType((*VacuumVolumeCheckResponse)(nil), "volume_server_pb.VacuumVolumeCheckResponse")
	proto.RegisterType((*VacuumVolumeCompactRequest)(nil), "volume_server_pb.VacuumVolumeCompactRequest")
	proto.RegisterType((*VacuumVolumeCompactResponse)(nil), "volume_server_pb.VacuumVolumeCompactResponse")
	proto.RegisterType((*VacuumVolumeCommitRequest)(nil), "volume_server_pb.VacuumVolumeCommitRequest")
	proto.RegisterType((*VacuumVolumeCommitResponse)(nil), "volume_server_pb.VacuumVolumeCommitResponse")
	proto.RegisterType((*VacuumVolumeCleanupRequest)(nil), "volume_server_pb.VacuumVolumeCleanupRequest")
	proto.RegisterType((*VacuumVolumeCleanupResponse)(nil), "volume_server_pb.VacuumVolumeCleanupResponse")
	proto.RegisterType((*DeleteCollectionRequest)(nil), "volume_server_pb.DeleteCollectionRequest")
	proto.RegisterType((*DeleteCollectionResponse)(nil), "volume_server_pb.DeleteCollectionResponse")
	proto.RegisterType((*AllocateVolumeRequest)(nil), "volume_server_pb.AllocateVolumeRequest")
	proto.RegisterType((*AllocateVolumeResponse)(nil), "volume_server_pb.AllocateVolumeResponse")
	proto.RegisterType((*VolumeSyncStatusRequest)(nil), "volume_server_pb.VolumeSyncStatusRequest")
	proto.RegisterType((*VolumeSyncStatusResponse)(nil), "volume_server_pb.VolumeSyncStatusResponse")
	proto.RegisterType((*VolumeIncrementalCopyRequest)(nil), "volume_server_pb.VolumeIncrementalCopyRequest")
	proto.RegisterType((*VolumeIncrementalCopyResponse)(nil), "volume_server_pb.VolumeIncrementalCopyResponse")
	proto.RegisterType((*VolumeMountRequest)(nil), "volume_server_pb.VolumeMountRequest")
	proto.RegisterType((*VolumeMountResponse)(nil), "volume_server_pb.VolumeMountResponse")
	proto.RegisterType((*VolumeUnmountRequest)(nil), "volume_server_pb.VolumeUnmountRequest")
	proto.RegisterType((*VolumeUnmountResponse)(nil), "volume_server_pb.VolumeUnmountResponse")
	proto.RegisterType((*VolumeDeleteRequest)(nil), "volume_server_pb.VolumeDeleteRequest")
	proto.RegisterType((*VolumeDeleteResponse)(nil), "volume_server_pb.VolumeDeleteResponse")
	proto.RegisterType((*VolumeMarkReadonlyRequest)(nil), "volume_server_pb.VolumeMarkReadonlyRequest")
	proto.RegisterType((*VolumeMarkReadonlyResponse)(nil), "volume_server_pb.VolumeMarkReadonlyResponse")
	proto.RegisterType((*VolumeConfigureRequest)(nil), "volume_server_pb.VolumeConfigureRequest")
	proto.RegisterType((*VolumeConfigureResponse)(nil), "volume_server_pb.VolumeConfigureResponse")
	proto.RegisterType((*VolumeCopyRequest)(nil), "volume_server_pb.VolumeCopyRequest")
	proto.RegisterType((*VolumeCopyResponse)(nil), "volume_server_pb.VolumeCopyResponse")
	proto.RegisterType((*CopyFileRequest)(nil), "volume_server_pb.CopyFileRequest")
	proto.RegisterType((*CopyFileResponse)(nil), "volume_server_pb.CopyFileResponse")
	proto.RegisterType((*VolumeTailSenderRequest)(nil), "volume_server_pb.VolumeTailSenderRequest")
	proto.RegisterType((*VolumeTailSenderResponse)(nil), "volume_server_pb.VolumeTailSenderResponse")
	proto.RegisterType((*VolumeTailReceiverRequest)(nil), "volume_server_pb.VolumeTailReceiverRequest")
	proto.RegisterType((*VolumeTailReceiverResponse)(nil), "volume_server_pb.VolumeTailReceiverResponse")
	proto.RegisterType((*VolumeEcShardsGenerateRequest)(nil), "volume_server_pb.VolumeEcShardsGenerateRequest")
	proto.RegisterType((*VolumeEcShardsGenerateResponse)(nil), "volume_server_pb.VolumeEcShardsGenerateResponse")
	proto.RegisterType((*VolumeEcShardsRebuildRequest)(nil), "volume_server_pb.VolumeEcShardsRebuildRequest")
	proto.RegisterType((*VolumeEcShardsRebuildResponse)(nil), "volume_server_pb.VolumeEcShardsRebuildResponse")
	proto.RegisterType((*VolumeEcShardsCopyRequest)(nil), "volume_server_pb.VolumeEcShardsCopyRequest")
	proto.RegisterType((*VolumeEcShardsCopyResponse)(nil), "volume_server_pb.VolumeEcShardsCopyResponse")
	proto.RegisterType((*VolumeEcShardsDeleteRequest)(nil), "volume_server_pb.VolumeEcShardsDeleteRequest")
	proto.RegisterType((*VolumeEcShardsDeleteResponse)(nil), "volume_server_pb.VolumeEcShardsDeleteResponse")
	proto.RegisterType((*VolumeEcShardsMountRequest)(nil), "volume_server_pb.VolumeEcShardsMountRequest")
	proto.RegisterType((*VolumeEcShardsMountResponse)(nil), "volume_server_pb.VolumeEcShardsMountResponse")
	proto.RegisterType((*VolumeEcShardsUnmountRequest)(nil), "volume_server_pb.VolumeEcShardsUnmountRequest")
	proto.RegisterType((*VolumeEcShardsUnmountResponse)(nil), "volume_server_pb.VolumeEcShardsUnmountResponse")
	proto.RegisterType((*VolumeEcShardReadRequest)(nil), "volume_server_pb.VolumeEcShardReadRequest")
	proto.RegisterType((*VolumeEcShardReadResponse)(nil), "volume_server_pb.VolumeEcShardReadResponse")
	proto.RegisterType((*VolumeEcBlobDeleteRequest)(nil), "volume_server_pb.VolumeEcBlobDeleteRequest")
	proto.RegisterType((*VolumeEcBlobDeleteResponse)(nil), "volume_server_pb.VolumeEcBlobDeleteResponse")
	proto.RegisterType((*VolumeEcShardsToVolumeRequest)(nil), "volume_server_pb.VolumeEcShardsToVolumeRequest")
	proto.RegisterType((*VolumeEcShardsToVolumeResponse)(nil), "volume_server_pb.VolumeEcShardsToVolumeResponse")
	proto.RegisterType((*ReadVolumeFileStatusRequest)(nil), "volume_server_pb.ReadVolumeFileStatusRequest")
	proto.RegisterType((*ReadVolumeFileStatusResponse)(nil), "volume_server_pb.ReadVolumeFileStatusResponse")
	proto.RegisterType((*DiskStatus)(nil), "volume_server_pb.DiskStatus")
	proto.RegisterType((*MemStatus)(nil), "volume_server_pb.MemStatus")
	proto.RegisterType((*RemoteFile)(nil), "volume_server_pb.RemoteFile")
	proto.RegisterType((*VolumeInfo)(nil), "volume_server_pb.VolumeInfo")
	proto.RegisterType((*VolumeTierMoveDatToRemoteRequest)(nil), "volume_server_pb.VolumeTierMoveDatToRemoteRequest")
	proto.RegisterType((*VolumeTierMoveDatToRemoteResponse)(nil), "volume_server_pb.VolumeTierMoveDatToRemoteResponse")
	proto.RegisterType((*VolumeTierMoveDatFromRemoteRequest)(nil), "volume_server_pb.VolumeTierMoveDatFromRemoteRequest")
	proto.RegisterType((*VolumeTierMoveDatFromRemoteResponse)(nil), "volume_server_pb.VolumeTierMoveDatFromRemoteResponse")
	proto.RegisterType((*VolumeServerStatusRequest)(nil), "volume_server_pb.VolumeServerStatusRequest")
	proto.RegisterType((*VolumeServerStatusResponse)(nil), "volume_server_pb.VolumeServerStatusResponse")
	proto.RegisterType((*QueryRequest)(nil), "volume_server_pb.QueryRequest")
	proto.RegisterType((*QueryRequest_Filter)(nil), "volume_server_pb.QueryRequest.Filter")
	proto.RegisterType((*QueryRequest_InputSerialization)(nil), "volume_server_pb.QueryRequest.InputSerialization")
	proto.RegisterType((*QueryRequest_InputSerialization_CSVInput)(nil), "volume_server_pb.QueryRequest.InputSerialization.CSVInput")
	proto.RegisterType((*QueryRequest_InputSerialization_JSONInput)(nil), "volume_server_pb.QueryRequest.InputSerialization.JSONInput")
	proto.RegisterType((*QueryRequest_InputSerialization_ParquetInput)(nil), "volume_server_pb.QueryRequest.InputSerialization.ParquetInput")
	proto.RegisterType((*QueryRequest_OutputSerialization)(nil), "volume_server_pb.QueryRequest.OutputSerialization")
	proto.RegisterType((*QueryRequest_OutputSerialization_CSVOutput)(nil), "volume_server_pb.QueryRequest.OutputSerialization.CSVOutput")
	proto.RegisterType((*QueryRequest_OutputSerialization_JSONOutput)(nil), "volume_server_pb.QueryRequest.OutputSerialization.JSONOutput")
	proto.RegisterType((*QueriedStripe)(nil), "volume_server_pb.QueriedStripe")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VolumeServer service

type VolumeServerClient interface {
	// Experts only: takes multiple fid parameters. This function does not propagate deletes to replicas.
	BatchDelete(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteResponse, error)
	FileGet(ctx context.Context, in *FileGetRequest, opts ...grpc.CallOption) (VolumeServer_FileGetClient, error)
	VacuumVolumeCheck(ctx context.Context, in *VacuumVolumeCheckRequest, opts ...grpc.CallOption) (*VacuumVolumeCheckResponse, error)
	VacuumVolumeCompact(ctx context.Context, in *VacuumVolumeCompactRequest, opts ...grpc.CallOption) (*VacuumVolumeCompactResponse, error)
	VacuumVolumeCommit(ctx context.Context, in *VacuumVolumeCommitRequest, opts ...grpc.CallOption) (*VacuumVolumeCommitResponse, error)
	VacuumVolumeCleanup(ctx context.Context, in *VacuumVolumeCleanupRequest, opts ...grpc.CallOption) (*VacuumVolumeCleanupResponse, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
	AllocateVolume(ctx context.Context, in *AllocateVolumeRequest, opts ...grpc.CallOption) (*AllocateVolumeResponse, error)
	VolumeSyncStatus(ctx context.Context, in *VolumeSyncStatusRequest, opts ...grpc.CallOption) (*VolumeSyncStatusResponse, error)
	VolumeIncrementalCopy(ctx context.Context, in *VolumeIncrementalCopyRequest, opts ...grpc.CallOption) (VolumeServer_VolumeIncrementalCopyClient, error)
	VolumeMount(ctx context.Context, in *VolumeMountRequest, opts ...grpc.CallOption) (*VolumeMountResponse, error)
	VolumeUnmount(ctx context.Context, in *VolumeUnmountRequest, opts ...grpc.CallOption) (*VolumeUnmountResponse, error)
	VolumeDelete(ctx context.Context, in *VolumeDeleteRequest, opts ...grpc.CallOption) (*VolumeDeleteResponse, error)
	VolumeMarkReadonly(ctx context.Context, in *VolumeMarkReadonlyRequest, opts ...grpc.CallOption) (*VolumeMarkReadonlyResponse, error)
	VolumeConfigure(ctx context.Context, in *VolumeConfigureRequest, opts ...grpc.CallOption) (*VolumeConfigureResponse, error)
	// copy the .idx .dat files, and mount this volume
	VolumeCopy(ctx context.Context, in *VolumeCopyRequest, opts ...grpc.CallOption) (*VolumeCopyResponse, error)
	ReadVolumeFileStatus(ctx context.Context, in *ReadVolumeFileStatusRequest, opts ...grpc.CallOption) (*ReadVolumeFileStatusResponse, error)
	CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (VolumeServer_CopyFileClient, error)
	VolumeTailSender(ctx context.Context, in *VolumeTailSenderRequest, opts ...grpc.CallOption) (VolumeServer_VolumeTailSenderClient, error)
	VolumeTailReceiver(ctx context.Context, in *VolumeTailReceiverRequest, opts ...grpc.CallOption) (*VolumeTailReceiverResponse, error)
	// erasure coding
	VolumeEcShardsGenerate(ctx context.Context, in *VolumeEcShardsGenerateRequest, opts ...grpc.CallOption) (*VolumeEcShardsGenerateResponse, error)
	VolumeEcShardsRebuild(ctx context.Context, in *VolumeEcShardsRebuildRequest, opts ...grpc.CallOption) (*VolumeEcShardsRebuildResponse, error)
	VolumeEcShardsCopy(ctx context.Context, in *VolumeEcShardsCopyRequest, opts ...grpc.CallOption) (*VolumeEcShardsCopyResponse, error)
	VolumeEcShardsDelete(ctx context.Context, in *VolumeEcShardsDeleteRequest, opts ...grpc.CallOption) (*VolumeEcShardsDeleteResponse, error)
	VolumeEcShardsMount(ctx context.Context, in *VolumeEcShardsMountRequest, opts ...grpc.CallOption) (*VolumeEcShardsMountResponse, error)
	VolumeEcShardsUnmount(ctx context.Context, in *VolumeEcShardsUnmountRequest, opts ...grpc.CallOption) (*VolumeEcShardsUnmountResponse, error)
	VolumeEcShardRead(ctx context.Context, in *VolumeEcShardReadRequest, opts ...grpc.CallOption) (VolumeServer_VolumeEcShardReadClient, error)
	VolumeEcBlobDelete(ctx context.Context, in *VolumeEcBlobDeleteRequest, opts ...grpc.CallOption) (*VolumeEcBlobDeleteResponse, error)
	VolumeEcShardsToVolume(ctx context.Context, in *VolumeEcShardsToVolumeRequest, opts ...grpc.CallOption) (*VolumeEcShardsToVolumeResponse, error)
	// tiered storage
	VolumeTierMoveDatToRemote(ctx context.Context, in *VolumeTierMoveDatToRemoteRequest, opts ...grpc.CallOption) (VolumeServer_VolumeTierMoveDatToRemoteClient, error)
	VolumeTierMoveDatFromRemote(ctx context.Context, in *VolumeTierMoveDatFromRemoteRequest, opts ...grpc.CallOption) (VolumeServer_VolumeTierMoveDatFromRemoteClient, error)
	VolumeServerStatus(ctx context.Context, in *VolumeServerStatusRequest, opts ...grpc.CallOption) (*VolumeServerStatusResponse, error)
	// <experimental> query
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (VolumeServer_QueryClient, error)
}

type volumeServerClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServerClient(cc *grpc.ClientConn) VolumeServerClient {
	return &volumeServerClient{cc}
}

func (c *volumeServerClient) BatchDelete(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteResponse, error) {
	out := new(BatchDeleteResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/BatchDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) FileGet(ctx context.Context, in *FileGetRequest, opts ...grpc.CallOption) (VolumeServer_FileGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[0], c.cc, "/volume_server_pb.VolumeServer/FileGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerFileGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_FileGetClient interface {
	Recv() (*FileGetResponse, error)
	grpc.ClientStream
}

type volumeServerFileGetClient struct {
	grpc.ClientStream
}

func (x *volumeServerFileGetClient) Recv() (*FileGetResponse, error) {
	m := new(FileGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VacuumVolumeCheck(ctx context.Context, in *VacuumVolumeCheckRequest, opts ...grpc.CallOption) (*VacuumVolumeCheckResponse, error) {
	out := new(VacuumVolumeCheckResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VacuumVolumeCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VacuumVolumeCompact(ctx context.Context, in *VacuumVolumeCompactRequest, opts ...grpc.CallOption) (*VacuumVolumeCompactResponse, error) {
	out := new(VacuumVolumeCompactResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VacuumVolumeCompact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VacuumVolumeCommit(ctx context.Context, in *VacuumVolumeCommitRequest, opts ...grpc.CallOption) (*VacuumVolumeCommitResponse, error) {
	out := new(VacuumVolumeCommitResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VacuumVolumeCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VacuumVolumeCleanup(ctx context.Context, in *VacuumVolumeCleanupRequest, opts ...grpc.CallOption) (*VacuumVolumeCleanupResponse, error) {
	out := new(VacuumVolumeCleanupResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VacuumVolumeCleanup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/DeleteCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) AllocateVolume(ctx context.Context, in *AllocateVolumeRequest, opts ...grpc.CallOption) (*AllocateVolumeResponse, error) {
	out := new(AllocateVolumeResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/AllocateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeSyncStatus(ctx context.Context, in *VolumeSyncStatusRequest, opts ...grpc.CallOption) (*VolumeSyncStatusResponse, error) {
	out := new(VolumeSyncStatusResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeSyncStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeIncrementalCopy(ctx context.Context, in *VolumeIncrementalCopyRequest, opts ...grpc.CallOption) (VolumeServer_VolumeIncrementalCopyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[1], c.cc, "/volume_server_pb.VolumeServer/VolumeIncrementalCopy", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerVolumeIncrementalCopyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_VolumeIncrementalCopyClient interface {
	Recv() (*VolumeIncrementalCopyResponse, error)
	grpc.ClientStream
}

type volumeServerVolumeIncrementalCopyClient struct {
	grpc.ClientStream
}

func (x *volumeServerVolumeIncrementalCopyClient) Recv() (*VolumeIncrementalCopyResponse, error) {
	m := new(VolumeIncrementalCopyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VolumeMount(ctx context.Context, in *VolumeMountRequest, opts ...grpc.CallOption) (*VolumeMountResponse, error) {
	out := new(VolumeMountResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeMount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeUnmount(ctx context.Context, in *VolumeUnmountRequest, opts ...grpc.CallOption) (*VolumeUnmountResponse, error) {
	out := new(VolumeUnmountResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeUnmount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeDelete(ctx context.Context, in *VolumeDeleteRequest, opts ...grpc.CallOption) (*VolumeDeleteResponse, error) {
	out := new(VolumeDeleteResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeMarkReadonly(ctx context.Context, in *VolumeMarkReadonlyRequest, opts ...grpc.CallOption) (*VolumeMarkReadonlyResponse, error) {
	out := new(VolumeMarkReadonlyResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeMarkReadonly", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeConfigure(ctx context.Context, in *VolumeConfigureRequest, opts ...grpc.CallOption) (*VolumeConfigureResponse, error) {
	out := new(VolumeConfigureResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeConfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeCopy(ctx context.Context, in *VolumeCopyRequest, opts ...grpc.CallOption) (*VolumeCopyResponse, error) {
	out := new(VolumeCopyResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeCopy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) ReadVolumeFileStatus(ctx context.Context, in *ReadVolumeFileStatusRequest, opts ...grpc.CallOption) (*ReadVolumeFileStatusResponse, error) {
	out := new(ReadVolumeFileStatusResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/ReadVolumeFileStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) CopyFile(ctx context.Context, in *CopyFileRequest, opts ...grpc.CallOption) (VolumeServer_CopyFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[2], c.cc, "/volume_server_pb.VolumeServer/CopyFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerCopyFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_CopyFileClient interface {
	Recv() (*CopyFileResponse, error)
	grpc.ClientStream
}

type volumeServerCopyFileClient struct {
	grpc.ClientStream
}

func (x *volumeServerCopyFileClient) Recv() (*CopyFileResponse, error) {
	m := new(CopyFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VolumeTailSender(ctx context.Context, in *VolumeTailSenderRequest, opts ...grpc.CallOption) (VolumeServer_VolumeTailSenderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[3], c.cc, "/volume_server_pb.VolumeServer/VolumeTailSender", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerVolumeTailSenderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_VolumeTailSenderClient interface {
	Recv() (*VolumeTailSenderResponse, error)
	grpc.ClientStream
}

type volumeServerVolumeTailSenderClient struct {
	grpc.ClientStream
}

func (x *volumeServerVolumeTailSenderClient) Recv() (*VolumeTailSenderResponse, error) {
	m := new(VolumeTailSenderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VolumeTailReceiver(ctx context.Context, in *VolumeTailReceiverRequest, opts ...grpc.CallOption) (*VolumeTailReceiverResponse, error) {
	out := new(VolumeTailReceiverResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeTailReceiver", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsGenerate(ctx context.Context, in *VolumeEcShardsGenerateRequest, opts ...grpc.CallOption) (*VolumeEcShardsGenerateResponse, error) {
	out := new(VolumeEcShardsGenerateResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsGenerate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsRebuild(ctx context.Context, in *VolumeEcShardsRebuildRequest, opts ...grpc.CallOption) (*VolumeEcShardsRebuildResponse, error) {
	out := new(VolumeEcShardsRebuildResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsRebuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsCopy(ctx context.Context, in *VolumeEcShardsCopyRequest, opts ...grpc.CallOption) (*VolumeEcShardsCopyResponse, error) {
	out := new(VolumeEcShardsCopyResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsCopy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsDelete(ctx context.Context, in *VolumeEcShardsDeleteRequest, opts ...grpc.CallOption) (*VolumeEcShardsDeleteResponse, error) {
	out := new(VolumeEcShardsDeleteResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsMount(ctx context.Context, in *VolumeEcShardsMountRequest, opts ...grpc.CallOption) (*VolumeEcShardsMountResponse, error) {
	out := new(VolumeEcShardsMountResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsMount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsUnmount(ctx context.Context, in *VolumeEcShardsUnmountRequest, opts ...grpc.CallOption) (*VolumeEcShardsUnmountResponse, error) {
	out := new(VolumeEcShardsUnmountResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsUnmount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardRead(ctx context.Context, in *VolumeEcShardReadRequest, opts ...grpc.CallOption) (VolumeServer_VolumeEcShardReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[4], c.cc, "/volume_server_pb.VolumeServer/VolumeEcShardRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerVolumeEcShardReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_VolumeEcShardReadClient interface {
	Recv() (*VolumeEcShardReadResponse, error)
	grpc.ClientStream
}

type volumeServerVolumeEcShardReadClient struct {
	grpc.ClientStream
}

func (x *volumeServerVolumeEcShardReadClient) Recv() (*VolumeEcShardReadResponse, error) {
	m := new(VolumeEcShardReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VolumeEcBlobDelete(ctx context.Context, in *VolumeEcBlobDeleteRequest, opts ...grpc.CallOption) (*VolumeEcBlobDeleteResponse, error) {
	out := new(VolumeEcBlobDeleteResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcBlobDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeEcShardsToVolume(ctx context.Context, in *VolumeEcShardsToVolumeRequest, opts ...grpc.CallOption) (*VolumeEcShardsToVolumeResponse, error) {
	out := new(VolumeEcShardsToVolumeResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeEcShardsToVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) VolumeTierMoveDatToRemote(ctx context.Context, in *VolumeTierMoveDatToRemoteRequest, opts ...grpc.CallOption) (VolumeServer_VolumeTierMoveDatToRemoteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[5], c.cc, "/volume_server_pb.VolumeServer/VolumeTierMoveDatToRemote", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerVolumeTierMoveDatToRemoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_VolumeTierMoveDatToRemoteClient interface {
	Recv() (*VolumeTierMoveDatToRemoteResponse, error)
	grpc.ClientStream
}

type volumeServerVolumeTierMoveDatToRemoteClient struct {
	grpc.ClientStream
}

func (x *volumeServerVolumeTierMoveDatToRemoteClient) Recv() (*VolumeTierMoveDatToRemoteResponse, error) {
	m := new(VolumeTierMoveDatToRemoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VolumeTierMoveDatFromRemote(ctx context.Context, in *VolumeTierMoveDatFromRemoteRequest, opts ...grpc.CallOption) (VolumeServer_VolumeTierMoveDatFromRemoteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[6], c.cc, "/volume_server_pb.VolumeServer/VolumeTierMoveDatFromRemote", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerVolumeTierMoveDatFromRemoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_VolumeTierMoveDatFromRemoteClient interface {
	Recv() (*VolumeTierMoveDatFromRemoteResponse, error)
	grpc.ClientStream
}

type volumeServerVolumeTierMoveDatFromRemoteClient struct {
	grpc.ClientStream
}

func (x *volumeServerVolumeTierMoveDatFromRemoteClient) Recv() (*VolumeTierMoveDatFromRemoteResponse, error) {
	m := new(VolumeTierMoveDatFromRemoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServerClient) VolumeServerStatus(ctx context.Context, in *VolumeServerStatusRequest, opts ...grpc.CallOption) (*VolumeServerStatusResponse, error) {
	out := new(VolumeServerStatusResponse)
	err := grpc.Invoke(ctx, "/volume_server_pb.VolumeServer/VolumeServerStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (VolumeServer_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeServer_serviceDesc.Streams[7], c.cc, "/volume_server_pb.VolumeServer/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServerQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeServer_QueryClient interface {
	Recv() (*QueriedStripe, error)
	grpc.ClientStream
}

type volumeServerQueryClient struct {
	grpc.ClientStream
}

func (x *volumeServerQueryClient) Recv() (*QueriedStripe, error) {
	m := new(QueriedStripe)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VolumeServer service

type VolumeServerServer interface {
	// Experts only: takes multiple fid parameters. This function does not propagate deletes to replicas.
	BatchDelete(context.Context, *BatchDeleteRequest) (*BatchDeleteResponse, error)
	FileGet(*FileGetRequest, VolumeServer_FileGetServer) error
	VacuumVolumeCheck(context.Context, *VacuumVolumeCheckRequest) (*VacuumVolumeCheckResponse, error)
	VacuumVolumeCompact(context.Context, *VacuumVolumeCompactRequest) (*VacuumVolumeCompactResponse, error)
	VacuumVolumeCommit(context.Context, *VacuumVolumeCommitRequest) (*VacuumVolumeCommitResponse, error)
	VacuumVolumeCleanup(context.Context, *VacuumVolumeCleanupRequest) (*VacuumVolumeCleanupResponse, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
	AllocateVolume(context.Context, *AllocateVolumeRequest) (*AllocateVolumeResponse, error)
	VolumeSyncStatus(context.Context, *VolumeSyncStatusRequest) (*VolumeSyncStatusResponse, error)
	VolumeIncrementalCopy(*VolumeIncrementalCopyRequest, VolumeServer_VolumeIncrementalCopyServer) error
	VolumeMount(context.Context, *VolumeMountRequest) (*VolumeMountResponse, error)
	VolumeUnmount(context.Context, *VolumeUnmountRequest) (*VolumeUnmountResponse, error)
	VolumeDelete(context.Context, *VolumeDeleteRequest) (*VolumeDeleteResponse, error)
	VolumeMarkReadonly(context.Context, *VolumeMarkReadonlyRequest) (*VolumeMarkReadonlyResponse, error)
	VolumeConfigure(context.Context, *VolumeConfigureRequest) (*VolumeConfigureResponse, error)
	// copy the .idx .dat files, and mount this volume
	VolumeCopy(context.Context, *VolumeCopyRequest) (*VolumeCopyResponse, error)
	ReadVolumeFileStatus(context.Context, *ReadVolumeFileStatusRequest) (*ReadVolumeFileStatusResponse, error)
	CopyFile(*CopyFileRequest, VolumeServer_CopyFileServer) error
	VolumeTailSender(*VolumeTailSenderRequest, VolumeServer_VolumeTailSenderServer) error
	VolumeTailReceiver(context.Context, *VolumeTailReceiverRequest) (*VolumeTailReceiverResponse, error)
	// erasure coding
	VolumeEcShardsGenerate(context.Context, *VolumeEcShardsGenerateRequest) (*VolumeEcShardsGenerateResponse, error)
	VolumeEcShardsRebuild(context.Context, *VolumeEcShardsRebuildRequest) (*VolumeEcShardsRebuildResponse, error)
	VolumeEcShardsCopy(context.Context, *VolumeEcShardsCopyRequest) (*VolumeEcShardsCopyResponse, error)
	VolumeEcShardsDelete(context.Context, *VolumeEcShardsDeleteRequest) (*VolumeEcShardsDeleteResponse, error)
	VolumeEcShardsMount(context.Context, *VolumeEcShardsMountRequest) (*VolumeEcShardsMountResponse, error)
	VolumeEcShardsUnmount(context.Context, *VolumeEcShardsUnmountRequest) (*VolumeEcShardsUnmountResponse, error)
	VolumeEcShardRead(*VolumeEcShardReadRequest, VolumeServer_VolumeEcShardReadServer) error
	VolumeEcBlobDelete(context.Context, *VolumeEcBlobDeleteRequest) (*VolumeEcBlobDeleteResponse, error)
	VolumeEcShardsToVolume(context.Context, *VolumeEcShardsToVolumeRequest) (*VolumeEcShardsToVolumeResponse, error)
	// tiered storage
	VolumeTierMoveDatToRemote(*VolumeTierMoveDatToRemoteRequest, VolumeServer_VolumeTierMoveDatToRemoteServer) error
	VolumeTierMoveDatFromRemote(*VolumeTierMoveDatFromRemoteRequest, VolumeServer_VolumeTierMoveDatFromRemoteServer) error
	VolumeServerStatus(context.Context, *VolumeServerStatusRequest) (*VolumeServerStatusResponse, error)
	// <experimental> query
	Query(*QueryRequest, VolumeServer_QueryServer) error
}

func RegisterVolumeServerServer(s *grpc.Server, srv VolumeServerServer) {
	s.RegisterService(&_VolumeServer_serviceDesc, srv)
}

func _VolumeServer_BatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).BatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/BatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).BatchDelete(ctx, req.(*BatchDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_FileGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).FileGet(m, &volumeServerFileGetServer{stream})
}

type VolumeServer_FileGetServer interface {
	Send(*FileGetResponse) error
	grpc.ServerStream
}

type volumeServerFileGetServer struct {
	grpc.ServerStream
}

func (x *volumeServerFileGetServer) Send(m *FileGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VacuumVolumeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacuumVolumeCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VacuumVolumeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VacuumVolumeCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VacuumVolumeCheck(ctx, req.(*VacuumVolumeCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VacuumVolumeCompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacuumVolumeCompactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VacuumVolumeCompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VacuumVolumeCompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VacuumVolumeCompact(ctx, req.(*VacuumVolumeCompactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VacuumVolumeCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacuumVolumeCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VacuumVolumeCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VacuumVolumeCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VacuumVolumeCommit(ctx, req.(*VacuumVolumeCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VacuumVolumeCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacuumVolumeCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VacuumVolumeCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VacuumVolumeCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VacuumVolumeCleanup(ctx, req.(*VacuumVolumeCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_AllocateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).AllocateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/AllocateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).AllocateVolume(ctx, req.(*AllocateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeSyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeSyncStatus(ctx, req.(*VolumeSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeIncrementalCopy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeIncrementalCopyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).VolumeIncrementalCopy(m, &volumeServerVolumeIncrementalCopyServer{stream})
}

type VolumeServer_VolumeIncrementalCopyServer interface {
	Send(*VolumeIncrementalCopyResponse) error
	grpc.ServerStream
}

type volumeServerVolumeIncrementalCopyServer struct {
	grpc.ServerStream
}

func (x *volumeServerVolumeIncrementalCopyServer) Send(m *VolumeIncrementalCopyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VolumeMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeMount(ctx, req.(*VolumeMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeUnmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeUnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeUnmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeUnmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeUnmount(ctx, req.(*VolumeUnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeDelete(ctx, req.(*VolumeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeMarkReadonly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMarkReadonlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeMarkReadonly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeMarkReadonly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeMarkReadonly(ctx, req.(*VolumeMarkReadonlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeConfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeConfigure(ctx, req.(*VolumeConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeCopy(ctx, req.(*VolumeCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_ReadVolumeFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVolumeFileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).ReadVolumeFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/ReadVolumeFileStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).ReadVolumeFileStatus(ctx, req.(*ReadVolumeFileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_CopyFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).CopyFile(m, &volumeServerCopyFileServer{stream})
}

type VolumeServer_CopyFileServer interface {
	Send(*CopyFileResponse) error
	grpc.ServerStream
}

type volumeServerCopyFileServer struct {
	grpc.ServerStream
}

func (x *volumeServerCopyFileServer) Send(m *CopyFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VolumeTailSender_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeTailSenderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).VolumeTailSender(m, &volumeServerVolumeTailSenderServer{stream})
}

type VolumeServer_VolumeTailSenderServer interface {
	Send(*VolumeTailSenderResponse) error
	grpc.ServerStream
}

type volumeServerVolumeTailSenderServer struct {
	grpc.ServerStream
}

func (x *volumeServerVolumeTailSenderServer) Send(m *VolumeTailSenderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VolumeTailReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeTailReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeTailReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeTailReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeTailReceiver(ctx, req.(*VolumeTailReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsGenerate(ctx, req.(*VolumeEcShardsGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsRebuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsRebuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsRebuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsRebuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsRebuild(ctx, req.(*VolumeEcShardsRebuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsCopy(ctx, req.(*VolumeEcShardsCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsDelete(ctx, req.(*VolumeEcShardsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsMount(ctx, req.(*VolumeEcShardsMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsUnmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsUnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsUnmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsUnmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsUnmount(ctx, req.(*VolumeEcShardsUnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeEcShardReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).VolumeEcShardRead(m, &volumeServerVolumeEcShardReadServer{stream})
}

type VolumeServer_VolumeEcShardReadServer interface {
	Send(*VolumeEcShardReadResponse) error
	grpc.ServerStream
}

type volumeServerVolumeEcShardReadServer struct {
	grpc.ServerStream
}

func (x *volumeServerVolumeEcShardReadServer) Send(m *VolumeEcShardReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VolumeEcBlobDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcBlobDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcBlobDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcBlobDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcBlobDelete(ctx, req.(*VolumeEcBlobDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeEcShardsToVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeEcShardsToVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeEcShardsToVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeEcShardsToVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeEcShardsToVolume(ctx, req.(*VolumeEcShardsToVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_VolumeTierMoveDatToRemote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeTierMoveDatToRemoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).VolumeTierMoveDatToRemote(m, &volumeServerVolumeTierMoveDatToRemoteServer{stream})
}

type VolumeServer_VolumeTierMoveDatToRemoteServer interface {
	Send(*VolumeTierMoveDatToRemoteResponse) error
	grpc.ServerStream
}

type volumeServerVolumeTierMoveDatToRemoteServer struct {
	grpc.ServerStream
}

func (x *volumeServerVolumeTierMoveDatToRemoteServer) Send(m *VolumeTierMoveDatToRemoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VolumeTierMoveDatFromRemote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeTierMoveDatFromRemoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).VolumeTierMoveDatFromRemote(m, &volumeServerVolumeTierMoveDatFromRemoteServer{stream})
}

type VolumeServer_VolumeTierMoveDatFromRemoteServer interface {
	Send(*VolumeTierMoveDatFromRemoteResponse) error
	grpc.ServerStream
}

type volumeServerVolumeTierMoveDatFromRemoteServer struct {
	grpc.ServerStream
}

func (x *volumeServerVolumeTierMoveDatFromRemoteServer) Send(m *VolumeTierMoveDatFromRemoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VolumeServer_VolumeServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeServerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServerServer).VolumeServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume_server_pb.VolumeServer/VolumeServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServerServer).VolumeServerStatus(ctx, req.(*VolumeServerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeServer_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeServerServer).Query(m, &volumeServerQueryServer{stream})
}

type VolumeServer_QueryServer interface {
	Send(*QueriedStripe) error
	grpc.ServerStream
}

type volumeServerQueryServer struct {
	grpc.ServerStream
}

func (x *volumeServerQueryServer) Send(m *QueriedStripe) error {
	return x.ServerStream.SendMsg(m)
}

var _VolumeServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "volume_server_pb.VolumeServer",
	HandlerType: (*VolumeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchDelete",
			Handler:    _VolumeServer_BatchDelete_Handler,
		},
		{
			MethodName: "VacuumVolumeCheck",
			Handler:    _VolumeServer_VacuumVolumeCheck_Handler,
		},
		{
			MethodName: "VacuumVolumeCompact",
			Handler:    _VolumeServer_VacuumVolumeCompact_Handler,
		},
		{
			MethodName: "VacuumVolumeCommit",
			Handler:    _VolumeServer_VacuumVolumeCommit_Handler,
		},
		{
			MethodName: "VacuumVolumeCleanup",
			Handler:    _VolumeServer_VacuumVolumeCleanup_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _VolumeServer_DeleteCollection_Handler,
		},
		{
			MethodName: "AllocateVolume",
			Handler:    _VolumeServer_AllocateVolume_Handler,
		},
		{
			MethodName: "VolumeSyncStatus",
			Handler:    _VolumeServer_VolumeSyncStatus_Handler,
		},
		{
			MethodName: "VolumeMount",
			Handler:    _VolumeServer_VolumeMount_Handler,
		},
		{
			MethodName: "VolumeUnmount",
			Handler:    _VolumeServer_VolumeUnmount_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _VolumeServer_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeMarkReadonly",
			Handler:    _VolumeServer_VolumeMarkReadonly_Handler,
		},
		{
			MethodName: "VolumeConfigure",
			Handler:    _VolumeServer_VolumeConfigure_Handler,
		},
		{
			MethodName: "VolumeCopy",
			Handler:    _VolumeServer_VolumeCopy_Handler,
		},
		{
			MethodName: "ReadVolumeFileStatus",
			Handler:    _VolumeServer_ReadVolumeFileStatus_Handler,
		},
		{
			MethodName: "VolumeTailReceiver",
			Handler:    _VolumeServer_VolumeTailReceiver_Handler,
		},
		{
			MethodName: "VolumeEcShardsGenerate",
			Handler:    _VolumeServer_VolumeEcShardsGenerate_Handler,
		},
		{
			MethodName: "VolumeEcShardsRebuild",
			Handler:    _VolumeServer_VolumeEcShardsRebuild_Handler,
		},
		{
			MethodName: "VolumeEcShardsCopy",
			Handler:    _VolumeServer_VolumeEcShardsCopy_Handler,
		},
		{
			MethodName: "VolumeEcShardsDelete",
			Handler:    _VolumeServer_VolumeEcShardsDelete_Handler,
		},
		{
			MethodName: "VolumeEcShardsMount",
			Handler:    _VolumeServer_VolumeEcShardsMount_Handler,
		},
		{
			MethodName: "VolumeEcShardsUnmount",
			Handler:    _VolumeServer_VolumeEcShardsUnmount_Handler,
		},
		{
			MethodName: "VolumeEcBlobDelete",
			Handler:    _VolumeServer_VolumeEcBlobDelete_Handler,
		},
		{
			MethodName: "VolumeEcShardsToVolume",
			Handler:    _VolumeServer_VolumeEcShardsToVolume_Handler,
		},
		{
			MethodName: "VolumeServerStatus",
			Handler:    _VolumeServer_VolumeServerStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileGet",
			Handler:       _VolumeServer_FileGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeIncrementalCopy",
			Handler:       _VolumeServer_VolumeIncrementalCopy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyFile",
			Handler:       _VolumeServer_CopyFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeTailSender",
			Handler:       _VolumeServer_VolumeTailSender_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeEcShardRead",
			Handler:       _VolumeServer_VolumeEcShardRead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeTierMoveDatToRemote",
			Handler:       _VolumeServer_VolumeTierMoveDatToRemote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeTierMoveDatFromRemote",
			Handler:       _VolumeServer_VolumeTierMoveDatFromRemote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _VolumeServer_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "volume_server.proto",
}

func init() { proto.RegisterFile("volume_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x1b, 0x4d, 0x6f, 0xdc, 0xd6,
	0x51, 0xd4, 0xea, 0x63, 0x77, 0x76, 0xd7, 0x92, 0x9f, 0x1c, 0x79, 0x43, 0x49, 0xb6, 0x4c, 0xe7,
	0x43, 0x72, 0x62, 0xc9, 0x51, 0x92, 0xc6, 0x71, 0x9a, 0x34, 0xb6, 0x6c, 0x39, 0x4e, 0x2c, 0x39,
	0xa1, 0x1c, 0xa7, 0x6d, 0x82, 0x12, 0x14, 0xf9, 0x56, 0x62, 0xc4, 0x25, 0x69, 0xf2, 0xad, 0xe2,
	0x35, 0xd2, 0x53, 0x0a, 0xb4, 0x40, 0xd1, 0x1e, 0x8a, 0x5e, 0x7a, 0x29, 0x50, 0xf4, 0xde, 0x6b,
	0xff, 0x42, 0xfe, 0x40, 0x81, 0x9e, 0x7a, 0xe9, 0xb9, 0x87, 0x1e, 0x0a, 0x14, 0xe8, 0xa5, 0x78,
	0x5f, 0x5c, 0x7e, 0x6a, 0xa9, 0x5a, 0x45, 0xd1, 0x1b, 0xdf, 0xbc, 0x79, 0x33, 0x6f, 0xe6, 0xcd,
	0xcc, 0x9b, 0x37, 0xb3, 0x0b, 0x73, 0x47, 0xbe, 0xdb, 0xef, 0x61, 0x23, 0xc2, 0xe1, 0x11, 0x0e,
	0xd7, 0x82, 0xd0, 0x27, 0x3e, 0x9a, 0x4d, 0x01, 0x8d, 0x60, 0x4f, 0x5b, 0x07, 0x74, 0xcb, 0x24,
	0xd6, 0xc1, 0x6d, 0xec, 0x62, 0x82, 0x75, 0xfc, 0xb8, 0x8f, 0x23, 0x82, 0x9e, 0x87, 0x7a, 0xd7,
	0x71, 0xb1, 0xe1, 0xd8, 0x51, 0x47, 0x59, 0xae, 0xad, 0x34, 0xf4, 0x69, 0x3a, 0xbe, 0x67, 0x47,
	0xda, 0x03, 0x98, 0x4b, 0x2d, 0x88, 0x02, 0xdf, 0x8b, 0x30, 0xba, 0x0e, 0xd3, 0x21, 0x8e, 0xfa,
	0x2e, 0xe1, 0x0b, 0x9a, 0x1b, 0x17, 0xd6, 0xb2, 0xbc, 0xd6, 0xe2, 0x25, 0x7d, 0x97, 0xe8, 0x12,
	0x5d, 0xfb, 0x46, 0x81, 0x56, 0x72, 0x06, 0x9d, 0x87, 0x69, 0xc1, 0xbc, 0xa3, 0x2c, 0x2b, 0x2b,
	0x0d, 0x7d, 0x8a, 0xf3, 0x46, 0xf3, 0x30, 0x15, 0x11, 0x93, 0xf4, 0xa3, 0xce, 0xf8, 0xb2, 0xb2,
	0x32, 0xa9, 0x8b, 0x11, 0x3a, 0x07, 0x93, 0x38, 0x0c, 0xfd, 0xb0, 0x53, 0x63, 0xe8, 0x7c, 0x80,
	0x10, 0x4c, 0x44, 0xce, 0x53, 0xdc, 0x99, 0x58, 0x56, 0x56, 0xda, 0x3a, 0xfb, 0x46, 0x1d, 0x98,
	0x3e, 0xc2, 0x61, 0xe4, 0xf8, 0x5e, 0x67, 0x92, 0x81, 0xe5, 0x50, 0xfb, 0x10, 0xce, 0x6c, 0x39,
	0x2e, 0xbe, 0x8b, 0x89, 0xd4, 0x41, 0xe9, 0x36, 0x2e, 0x42, 0xd3, 0xb4, 0x2c, 0x1c, 0x10, 0x63,
	0xff, 0xa9, 0x13, 0xb0, 0xbd, 0xd4, 0x75, 0xe0, 0xa0, 0xbb, 0x4f, 0x9d, 0x40, 0xfb, 0x69, 0x0d,
	0x66, 0x62, 0x62, 0x42, 0x3f, 0x08, 0x26, 0x6c, 0x93, 0x98, 0x8c, 0x54, 0x4b, 0x67, 0xdf, 0xe8,
	0x45, 0x38, 0x63, 0xf9, 0x1e, 0xc1, 0x1e, 0x31, 0x5c, 0xec, 0xed, 0x93, 0x03, 0x46, 0xab, 0xad,
	0xb7, 0x05, 0xf4, 0x3e, 0x03, 0xa2, 0x4b, 0xd0, 0x92, 0x68, 0x64, 0x10, 0x60, 0x21, 0x65, 0x53,
	0xc0, 0x1e, 0x0e, 0x02, 0x8c, 0x2e, 0x43, 0xdb, 0x35, 0x23, 0x62, 0xf4, 0x7c, 0xdb, 0xe9, 0x3a,
	0xd8, 0x66, 0x42, 0x4f, 0xe8, 0x2d, 0x0a, 0xdc, 0x16, 0x30, 0xa4, 0xf2, 0x43, 0xf5, 0xcc, 0x1e,
	0x66, 0xd2, 0x37, 0xf4, 0x78, 0x4c, 0xb7, 0x87, 0x89, 0xb9, 0xdf, 0x99, 0x62, 0x70, 0xf6, 0x8d,
	0x96, 0x00, 0x9c, 0x88, 0xc9, 0x18, 0x60, 0xbb, 0x33, 0xcd, 0xc4, 0x6c, 0x38, 0xd1, 0x5d, 0x0e,
	0x40, 0x1f, 0xc0, 0xf4, 0x01, 0x36, 0x6d, 0x1c, 0x46, 0x9d, 0x3a, 0x3b, 0xf1, 0xb5, 0xfc, 0x89,
	0x67, 0xb4, 0xb0, 0xf6, 0x01, 0x5f, 0x70, 0xc7, 0x23, 0xe1, 0x40, 0x97, 0xcb, 0xd1, 0x22, 0x34,
	0xd8, 0x91, 0x6d, 0xfa, 0x36, 0xee, 0x34, 0xd8, 0xd1, 0x0e, 0x01, 0xea, 0x0d, 0x68, 0x25, 0x97,
	0xa1, 0x59, 0xa8, 0x1d, 0xe2, 0x81, 0x38, 0x13, 0xfa, 0x49, 0xcf, 0xff, 0xc8, 0x74, 0xfb, 0x98,
	0xa9, 0xaf, 0xa1, 0xf3, 0xc1, 0x8d, 0xf1, 0xeb, 0x8a, 0x36, 0x0d, 0x93, 0x77, 0x7a, 0x01, 0x19,
	0x68, 0x6f, 0x41, 0xe7, 0x91, 0x69, 0xf5, 0xfb, 0xbd, 0x47, 0x6c, 0x8b, 0x9b, 0x07, 0xd8, 0x3a,
	0x94, 0x07, 0xbd, 0x00, 0x0d, 0xb1, 0x71, 0x71, 0xd4, 0x6d, 0xbd, 0xce, 0x01, 0xf7, 0x6c, 0xed,
	0x7d, 0x78, 0xbe, 0x60, 0xa1, 0x38, 0xd4, 0xcb, 0xd0, 0xde, 0x37, 0xc3, 0x3d, 0x73, 0x1f, 0x1b,
	0xa1, 0x49, 0x1c, 0x9f, 0xad, 0x56, 0xf4, 0x96, 0x00, 0xea, 0x14, 0xa6, 0x7d, 0x0e, 0x6a, 0x8a,
	0x82, 0xdf, 0x0b, 0x4c, 0x8b, 0x54, 0x61, 0x8e, 0x96, 0xa1, 0x19, 0x84, 0xd8, 0x74, 0x5d, 0xdf,
	0x32, 0x09, 0x17, 0xaf, 0xa6, 0x27, 0x41, 0xda, 0x12, 0x2c, 0x14, 0x12, 0xe7, 0x1b, 0xd4, 0xae,
	0x67, 0x76, 0xef, 0xf7, 0x7a, 0x4e, 0x25, 0xd6, 0xda, 0x7b, 0xb9, 0x5d, 0xb3, 0x95, 0x42, 0xf0,
	0x65, 0x68, 0x39, 0x91, 0x11, 0x62, 0xd3, 0x36, 0x7c, 0xcf, 0xe5, 0x87, 0x51, 0xd7, 0xc1, 0x89,
	0x74, 0x6c, 0xda, 0x0f, 0x3c, 0x77, 0xa0, 0xbd, 0x9d, 0x59, 0xef, 0x62, 0xd3, 0xeb, 0x07, 0x95,
	0x58, 0x67, 0x65, 0x92, 0x4b, 0x85, 0x4c, 0x6f, 0xc3, 0x79, 0x1e, 0x2e, 0x36, 0x7d, 0xd7, 0xc5,
	0x16, 0x71, 0x7c, 0x4f, 0x92, 0xbd, 0x00, 0x60, 0xc5, 0x40, 0x61, 0x21, 0x09, 0x88, 0xa6, 0x42,
	0x27, 0xbf, 0x54, 0x90, 0xfd, 0x8b, 0x02, 0xcf, 0xdd, 0x14, 0x6a, 0xe5, 0x8c, 0x2b, 0x1d, 0x51,
	0x9a, 0xe5, 0x78, 0x96, 0x65, 0xf6, 0x08, 0x6b, 0xb9, 0x23, 0xa4, 0x18, 0x21, 0x0e, 0x5c, 0xc7,
	0x32, 0x19, 0x89, 0x09, 0xee, 0xdd, 0x09, 0x10, 0xb5, 0x78, 0x42, 0x5c, 0xe1, 0xb3, 0xf4, 0x13,
	0x6d, 0xc0, 0x7c, 0x0f, 0xf7, 0xfc, 0x70, 0x60, 0xf4, 0xcc, 0xc0, 0xe8, 0x99, 0x4f, 0x0c, 0x1a,
	0xde, 0x8c, 0xde, 0x1e, 0x73, 0xe0, 0xb6, 0x8e, 0xf8, 0xec, 0xb6, 0x19, 0x6c, 0x9b, 0x4f, 0x76,
	0x9d, 0xa7, 0x78, 0x7b, 0x4f, 0xeb, 0xc0, 0x7c, 0x56, 0x3e, 0x21, 0xfa, 0x77, 0xe0, 0x3c, 0x87,
	0xec, 0x0e, 0x3c, 0x6b, 0x97, 0xc5, 0xd4, 0x4a, 0x07, 0xf5, 0x2f, 0x05, 0x3a, 0xf9, 0x85, 0xc2,
	0x44, 0x9e, 0x55, 0x6b, 0x27, 0xd6, 0xc9, 0x45, 0x68, 0x12, 0xd3, 0x71, 0x0d, 0xbf, 0xdb, 0x8d,
	0x30, 0x61, 0x8a, 0x98, 0xd0, 0x81, 0x82, 0x1e, 0x30, 0x08, 0x5a, 0x85, 0x59, 0x8b, 0xfb, 0x87,
	0x11, 0xe2, 0x23, 0x87, 0xdd, 0x02, 0xd3, 0x6c, 0x63, 0x33, 0x96, 0xf4, 0x1b, 0x0e, 0x46, 0x1a,
	0xb4, 0x1d, 0xfb, 0x89, 0xc1, 0xe2, 0x3f, 0xbb, 0x44, 0xea, 0x8c, 0x5a, 0xd3, 0xb1, 0x9f, 0xd0,
	0x90, 0x46, 0x35, 0xaa, 0x3d, 0x82, 0x45, 0x2e, 0xfc, 0x3d, 0xcf, 0x0a, 0x71, 0x0f, 0x7b, 0xc4,
	0x74, 0x37, 0xfd, 0x60, 0x50, 0xc9, 0x6c, 0x9e, 0x87, 0x7a, 0xe4, 0x78, 0x16, 0x36, 0x3c, 0x7e,
	0x99, 0x4d, 0xe8, 0xd3, 0x6c, 0xbc, 0x13, 0x69, 0xb7, 0x60, 0xa9, 0x84, 0xae, 0xd0, 0xec, 0x25,
	0x68, 0xb1, 0x8d, 0x89, 0x0b, 0x40, 0x5c, 0x29, 0x4d, 0x0a, 0xdb, 0xe4, 0x20, 0xed, 0x35, 0x40,
	0x9c, 0xc6, 0xb6, 0xdf, 0xf7, 0xaa, 0x39, 0xfc, 0x73, 0x30, 0x97, 0x5a, 0x22, 0x6c, 0xe3, 0x75,
	0x38, 0xc7, 0xc1, 0x9f, 0x7a, 0xbd, 0xca, 0xb4, 0xce, 0xc3, 0x73, 0x99, 0x45, 0x82, 0xda, 0x86,
	0x64, 0x92, 0x4e, 0x37, 0x8e, 0x25, 0x36, 0x2f, 0x77, 0x90, 0xce, 0x38, 0x58, 0x6c, 0xe3, 0x1b,
	0x36, 0xc3, 0x43, 0x1a, 0x77, 0x68, 0x24, 0xaa, 0x44, 0x71, 0x11, 0xd4, 0xa2, 0x95, 0x82, 0xee,
	0x67, 0x30, 0x2f, 0x63, 0x9e, 0xd7, 0x75, 0xf6, 0xfb, 0x21, 0xae, 0x1a, 0xab, 0x93, 0x26, 0x3b,
	0x9e, 0x33, 0x59, 0x6d, 0x5d, 0xba, 0x59, 0x82, 0xb0, 0x38, 0xd2, 0x38, 0x83, 0x51, 0x12, 0x19,
	0x8c, 0xf6, 0x07, 0x05, 0xce, 0xca, 0x15, 0x15, 0xed, 0xea, 0x84, 0x8e, 0x55, 0x2b, 0x75, 0xac,
	0x89, 0xa1, 0x63, 0xad, 0xc0, 0x6c, 0xe4, 0xf7, 0x43, 0x0b, 0x1b, 0x34, 0x6b, 0x31, 0x3c, 0x7a,
	0x4b, 0x73, 0xbf, 0x3b, 0xc3, 0xe1, 0xb7, 0x4d, 0x62, 0xee, 0xf8, 0x36, 0xd6, 0xbe, 0x27, 0xcd,
	0x2e, 0x65, 0xaf, 0xab, 0x70, 0x96, 0x25, 0x27, 0x66, 0x10, 0x60, 0xcf, 0x36, 0x4c, 0x42, 0x8d,
	0x5e, 0x61, 0x46, 0x7f, 0x86, 0x4e, 0xdc, 0x64, 0xf0, 0x9b, 0x64, 0x27, 0xd2, 0x7e, 0x3d, 0x0e,
	0x33, 0x74, 0x2d, 0x75, 0xb2, 0x4a, 0xf2, 0xce, 0x42, 0x0d, 0x3f, 0x21, 0x42, 0x50, 0xfa, 0x89,
	0xd6, 0x61, 0x4e, 0x78, 0xb3, 0xe3, 0x7b, 0x43, 0x47, 0xaf, 0xf1, 0xb8, 0x38, 0x9c, 0x8a, 0x7d,
	0xfd, 0x22, 0x34, 0x23, 0xe2, 0x07, 0x32, 0x6e, 0xf0, 0xcc, 0x09, 0x28, 0x48, 0xc4, 0x8d, 0xb4,
	0x4e, 0x27, 0x0b, 0x74, 0x4a, 0x2f, 0x43, 0x6c, 0x19, 0x7c, 0x57, 0x2c, 0xf2, 0xb0, 0xcb, 0xf0,
	0x8e, 0xc5, 0xb5, 0x81, 0xde, 0x83, 0x45, 0x67, 0xdf, 0xf3, 0x43, 0x6c, 0x08, 0x45, 0x32, 0xff,
	0xf5, 0x7c, 0x62, 0x74, 0xfd, 0xbe, 0x27, 0x73, 0xab, 0x0e, 0xc7, 0xd9, 0x65, 0x28, 0x54, 0x03,
	0x3b, 0x3e, 0xd9, 0xa2, 0xf3, 0xda, 0x9b, 0x30, 0x3b, 0xd4, 0x4a, 0xf5, 0x28, 0xf0, 0x8d, 0x22,
	0x2d, 0xee, 0xa1, 0xe9, 0xb8, 0xbb, 0xd8, 0xb3, 0x71, 0xf8, 0x8c, 0xd1, 0x09, 0x5d, 0x83, 0x73,
	0x8e, 0xed, 0x62, 0x83, 0x38, 0x3d, 0xec, 0xf7, 0x89, 0x11, 0x61, 0xcb, 0xf7, 0xec, 0x48, 0xea,
	0x97, 0xce, 0x3d, 0xe4, 0x53, 0xbb, 0x7c, 0x46, 0xfb, 0x49, 0x7c, 0x4b, 0x24, 0x77, 0x31, 0xcc,
	0xa0, 0x3c, 0x8c, 0x29, 0x41, 0x9e, 0x0c, 0x0a, 0x31, 0x5a, 0x1c, 0xc8, 0xf3, 0x3e, 0x7a, 0x42,
	0x02, 0x69, 0xcf, 0xb7, 0x07, 0x6c, 0x47, 0x2d, 0x1d, 0x38, 0xe8, 0x96, 0x6f, 0x0f, 0x58, 0xb8,
	0x8e, 0x0c, 0x66, 0x64, 0xd6, 0x41, 0xdf, 0x3b, 0x64, 0xbb, 0xa9, 0xeb, 0x4d, 0x27, 0xba, 0x6f,
	0x46, 0x64, 0x93, 0x82, 0xb4, 0x3f, 0x2a, 0x32, 0x5e, 0xd0, 0x6d, 0xe8, 0xd8, 0xc2, 0xce, 0xd1,
	0xff, 0x40, 0x1d, 0x74, 0x85, 0x30, 0x82, 0x54, 0xb6, 0x2c, 0x1c, 0x0e, 0xf1, 0x39, 0x71, 0xab,
	0xb2, 0x99, 0x61, 0xb8, 0x4a, 0x6f, 0x5c, 0x84, 0xab, 0x2f, 0xe4, 0x75, 0x71, 0xc7, 0xda, 0x3d,
	0x30, 0x43, 0x3b, 0xba, 0x8b, 0x3d, 0x1c, 0x9a, 0xe4, 0x54, 0xd2, 0x17, 0x6d, 0x19, 0x2e, 0x94,
	0x51, 0x17, 0xfc, 0x3f, 0x97, 0xd7, 0xa0, 0xc4, 0xd0, 0xf1, 0x5e, 0xdf, 0x71, 0xed, 0x53, 0x61,
	0xff, 0x51, 0x56, 0xb8, 0x98, 0xb8, 0xb0, 0x9f, 0x2b, 0x70, 0x36, 0x64, 0x20, 0x62, 0x44, 0x14,
	0x21, 0x7e, 0xb1, 0xb6, 0xf5, 0x19, 0x31, 0xc1, 0x16, 0xd2, 0x97, 0xeb, 0xcf, 0xc7, 0xa5, 0x05,
	0x48, 0x6a, 0xa7, 0x16, 0x56, 0x17, 0xa0, 0x31, 0x64, 0x5f, 0x63, 0xec, 0xeb, 0x91, 0xe0, 0x4b,
	0xad, 0xd3, 0xf2, 0x83, 0x81, 0x81, 0x2d, 0x9e, 0x51, 0xb0, 0xa3, 0xae, 0xd3, 0x07, 0x5c, 0x30,
	0xb8, 0x63, 0xb1, 0x84, 0xa2, 0x7a, 0x8c, 0x4d, 0x50, 0xfb, 0x92, 0x53, 0x9b, 0x4a, 0x52, 0xfb,
	0x92, 0x51, 0x93, 0x38, 0x47, 0x4e, 0x97, 0xe3, 0x4c, 0x0f, 0x71, 0x1e, 0x39, 0x5d, 0x8a, 0x33,
	0xb4, 0xaa, 0xb4, 0x32, 0xc4, 0xa9, 0x7e, 0x05, 0x0b, 0xe9, 0xd9, 0xea, 0x17, 0xf6, 0x33, 0x29,
	0x4b, 0xbb, 0x90, 0x35, 0xa7, 0xcc, 0xad, 0x7f, 0x94, 0xdd, 0x76, 0xe5, 0x0c, 0xe7, 0xd9, 0xf6,
	0xb5, 0x94, 0x55, 0x48, 0x3a, 0x4d, 0xfa, 0x7e, 0x76, 0xdb, 0x27, 0x48, 0x97, 0x8e, 0x67, 0x7c,
	0x31, 0xeb, 0x02, 0xd9, 0x9c, 0xea, 0x37, 0x71, 0x7c, 0x15, 0x18, 0x34, 0xa3, 0xa9, 0x1c, 0xd7,
	0x04, 0x5f, 0x51, 0x79, 0x98, 0x16, 0x6c, 0xd1, 0x3c, 0x4c, 0x89, 0xfb, 0x90, 0xbf, 0x58, 0xc4,
	0x28, 0x55, 0x54, 0xa9, 0x89, 0xa2, 0x8a, 0x2c, 0x16, 0xd1, 0x57, 0xf9, 0x24, 0x0f, 0x8f, 0x74,
	0xfc, 0x11, 0x1e, 0x68, 0x3b, 0x19, 0x8f, 0xe3, 0x5b, 0x3b, 0xa6, 0x24, 0xc2, 0x6b, 0x0e, 0x36,
	0x3b, 0x73, 0x5b, 0x94, 0x56, 0x1a, 0x8e, 0x30, 0x02, 0x5b, 0xfb, 0x85, 0x32, 0x24, 0x78, 0xcb,
	0xf5, 0xf7, 0x4e, 0xd1, 0x2a, 0x93, 0x52, 0xd4, 0x52, 0x52, 0x24, 0xab, 0x46, 0x13, 0xe9, 0xaa,
	0x51, 0xc2, 0x89, 0x92, 0xdb, 0x29, 0x0b, 0xcd, 0x0f, 0xfd, 0xd3, 0x7b, 0x59, 0xe6, 0x43, 0xf3,
	0x90, 0xba, 0xe0, 0x7f, 0x03, 0x16, 0xa8, 0xc2, 0x39, 0x94, 0xbd, 0x5b, 0xaa, 0xbf, 0xed, 0xfe,
	0x36, 0x0e, 0x8b, 0xc5, 0x8b, 0xab, 0xbc, 0xef, 0xde, 0x01, 0x35, 0x7e, 0x3f, 0xd1, 0xab, 0x31,
	0x22, 0x66, 0x2f, 0x88, 0x2f, 0x47, 0x7e, 0x87, 0x9e, 0x17, 0x8f, 0xa9, 0x87, 0x72, 0x5e, 0xde,
	0x90, 0xb9, 0xc7, 0x57, 0x2d, 0xf7, 0xf8, 0xa2, 0x0c, 0x6c, 0x93, 0x94, 0x31, 0xe0, 0x39, 0xdc,
	0x79, 0xdb, 0x24, 0x65, 0x0c, 0xe2, 0xc5, 0x8c, 0x01, 0xb7, 0xda, 0xa6, 0xc0, 0x67, 0x0c, 0x96,
	0x00, 0x44, 0x7a, 0xd5, 0xf7, 0xe4, 0x63, 0xb2, 0xc1, 0x93, 0xab, 0xbe, 0x57, 0x9a, 0x65, 0x4e,
	0x97, 0x66, 0x99, 0xe9, 0xd3, 0xac, 0xe7, 0x4e, 0xf3, 0xb7, 0x0a, 0xc0, 0x6d, 0x27, 0x3a, 0xe4,
	0x5a, 0xa6, 0x79, 0xad, 0xed, 0xc8, 0xe7, 0x00, 0xfd, 0xa4, 0x10, 0xd3, 0x75, 0x85, 0xee, 0xe8,
	0x27, 0xf5, 0x9f, 0x7e, 0x84, 0x6d, 0xa1, 0x1e, 0xf6, 0x4d, 0x61, 0xdd, 0x10, 0x63, 0xa1, 0x01,
	0xf6, 0x4d, 0x33, 0xc5, 0x00, 0x87, 0x16, 0xf6, 0x88, 0xc1, 0xe6, 0xa8, 0xb4, 0xe3, 0x7a, 0x53,
	0xc0, 0xb6, 0x32, 0x28, 0x8c, 0xe4, 0x54, 0x0a, 0xe5, 0xd3, 0x08, 0xdb, 0xda, 0xef, 0x15, 0x68,
	0x6c, 0xe3, 0x9e, 0xd8, 0xdf, 0x05, 0x80, 0x7d, 0x3f, 0xf4, 0xfb, 0xc4, 0xf1, 0x30, 0x4f, 0xe6,
	0x27, 0xf5, 0x04, 0xe4, 0x19, 0x76, 0x4b, 0x23, 0x0c, 0x76, 0xbb, 0xe2, 0x4c, 0xd8, 0x37, 0x85,
	0x1d, 0x60, 0x33, 0x10, 0xc7, 0xc0, 0xbe, 0xe9, 0x93, 0x29, 0x22, 0xa6, 0x75, 0xc8, 0x74, 0x3e,
	0xa1, 0xf3, 0x81, 0xf6, 0x67, 0x05, 0x40, 0xc7, 0x3d, 0x9f, 0x30, 0x93, 0xa5, 0x72, 0xed, 0x99,
	0xd6, 0x21, 0x7d, 0x76, 0xb0, 0xd2, 0x29, 0xd7, 0x67, 0x53, 0xc0, 0x58, 0xe9, 0x74, 0x09, 0x40,
	0xa2, 0x88, 0x30, 0xd8, 0xd0, 0x1b, 0x02, 0xc2, 0x1f, 0x18, 0x32, 0x22, 0x88, 0x6a, 0xe3, 0x30,
	0x34, 0xf2, 0x6d, 0xcb, 0xd0, 0xb8, 0x00, 0x8d, 0xac, 0x45, 0xb1, 0x88, 0xc2, 0xcc, 0xe9, 0x32,
	0xb4, 0x65, 0x6d, 0x96, 0xd9, 0xab, 0x10, 0xa5, 0x25, 0x81, 0xd4, 0x46, 0x59, 0x1d, 0xf4, 0x09,
	0xc1, 0x5e, 0x6c, 0x4a, 0x0d, 0x7d, 0x08, 0xd0, 0xbe, 0x06, 0x90, 0x75, 0x81, 0xae, 0x8f, 0x36,
	0x60, 0x92, 0x12, 0x97, 0xd5, 0xf6, 0xc5, 0x7c, 0xed, 0x75, 0xa8, 0x06, 0x9d, 0xa3, 0x26, 0xe3,
	0xd8, 0x78, 0x2a, 0x8e, 0x8d, 0x7e, 0x16, 0x6a, 0xdf, 0x2a, 0xb0, 0x2c, 0xb2, 0x50, 0x07, 0x87,
	0xdb, 0xfe, 0x11, 0xcd, 0x48, 0x1e, 0xfa, 0x9c, 0xc9, 0xa9, 0x04, 0xe0, 0xeb, 0xd0, 0xb1, 0x71,
	0x44, 0x1c, 0x8f, 0x31, 0x34, 0xe4, 0xa1, 0xb0, 0x72, 0x35, 0xdf, 0xd0, 0x7c, 0x62, 0xfe, 0x16,
	0x9f, 0xde, 0x31, 0x7b, 0x18, 0x5d, 0x85, 0xb9, 0x43, 0x8c, 0x03, 0xc3, 0xf5, 0x2d, 0xd3, 0x35,
	0xa4, 0x6b, 0x8b, 0x34, 0x6b, 0x96, 0x4e, 0xdd, 0xa7, 0x33, 0xb7, 0xb9, 0x7b, 0x6b, 0x11, 0x5c,
	0x3a, 0x46, 0x12, 0x11, 0xde, 0x16, 0xa1, 0x11, 0x84, 0xbe, 0x85, 0x23, 0x6a, 0xb3, 0x0a, 0xbb,
	0xed, 0x86, 0x00, 0x74, 0x0d, 0xe6, 0xe2, 0xc1, 0xc7, 0xdc, 0x49, 0xcc, 0x7d, 0x5e, 0xa0, 0x1d,
	0xd7, 0x8b, 0xa6, 0xb4, 0x5f, 0x29, 0xa0, 0xe5, 0xb8, 0x6e, 0x85, 0x7e, 0xef, 0x14, 0x35, 0xb8,
	0x0e, 0xe7, 0x98, 0x1e, 0x42, 0x46, 0x72, 0xa8, 0x08, 0xfe, 0x1a, 0x3a, 0x4b, 0xe7, 0x38, 0x37,
	0xa9, 0x89, 0x3e, 0x5c, 0x3e, 0x76, 0x4f, 0xff, 0x25, 0x5d, 0x2c, 0xc8, 0x4b, 0x9c, 0x3f, 0x70,
	0x52, 0xb7, 0x92, 0xf6, 0x3b, 0x45, 0xde, 0xa9, 0xe9, 0x59, 0xb1, 0x97, 0x9b, 0xd0, 0xb6, 0x9d,
	0xe8, 0xd0, 0xe0, 0xad, 0x9f, 0xe3, 0xec, 0x7f, 0x18, 0x4d, 0xf5, 0x96, 0x1d, 0x7f, 0xe3, 0x08,
	0xbd, 0x0f, 0x6d, 0x51, 0x3c, 0x4d, 0x74, 0x93, 0x9a, 0x1b, 0x0b, 0x79, 0x12, 0x71, 0xbc, 0xd3,
	0x5b, 0x7c, 0x05, 0x1f, 0x69, 0xff, 0x6c, 0x41, 0xeb, 0x93, 0x3e, 0x0e, 0x07, 0x89, 0xc2, 0x73,
	0x84, 0xc5, 0x31, 0xc8, 0x8e, 0x59, 0x02, 0x42, 0x6f, 0x9c, 0x6e, 0xe8, 0xf7, 0x8c, 0xb8, 0xa9,
	0x36, 0xce, 0x50, 0x9a, 0x14, 0xb8, 0xc5, 0x1b, 0x6b, 0xe8, 0x5d, 0x98, 0xea, 0x3a, 0x2e, 0xc1,
	0xbc, 0x8d, 0xd5, 0xdc, 0x78, 0x31, 0xbf, 0x9f, 0x24, 0xcf, 0xb5, 0x2d, 0x86, 0xac, 0x8b, 0x45,
	0x68, 0x0f, 0xe6, 0x1c, 0x2f, 0x60, 0x4f, 0xd0, 0xd0, 0x31, 0x5d, 0xe7, 0xe9, 0xb0, 0x74, 0xda,
	0xdc, 0x78, 0x6d, 0x04, 0xad, 0x7b, 0x74, 0xe5, 0x6e, 0x72, 0xa1, 0x8e, 0x9c, 0x1c, 0x0c, 0x61,
	0x38, 0xe7, 0xf7, 0x49, 0x9e, 0xc9, 0x24, 0x63, 0xb2, 0x31, 0x82, 0xc9, 0x03, 0xb6, 0x34, 0xcd,
	0x65, 0xce, 0xcf, 0x03, 0xd5, 0x1d, 0x98, 0xe2, 0xc2, 0xd1, 0x20, 0xdf, 0x75, 0xb0, 0x2b, 0x3b,
	0x70, 0x7c, 0x40, 0xe3, 0x98, 0x1f, 0xe0, 0xd0, 0xf4, 0x64, 0xbc, 0x96, 0xc3, 0x61, 0x27, 0xa8,
	0x96, 0xe8, 0x04, 0xa9, 0x7f, 0x9a, 0x04, 0x94, 0x97, 0x50, 0xd6, 0x83, 0x43, 0x1c, 0xd1, 0x18,
	0x98, 0xbc, 0x20, 0x66, 0x12, 0x70, 0x76, 0x49, 0x7c, 0x06, 0x0d, 0x2b, 0x3a, 0x32, 0x98, 0x4a,
	0x84, 0xb9, 0xdc, 0x38, 0xb1, 0x4a, 0xd7, 0x36, 0x77, 0x1f, 0x31, 0xa8, 0x5e, 0xb7, 0xa2, 0x23,
	0xf6, 0x85, 0x7e, 0x08, 0xf0, 0x65, 0xe4, 0x7b, 0x82, 0x32, 0x3f, 0xf8, 0x77, 0x4e, 0x4e, 0xf9,
	0xc3, 0xdd, 0x07, 0x3b, 0x9c, 0x74, 0x83, 0x92, 0xe3, 0xb4, 0x2d, 0x68, 0x07, 0x66, 0xf8, 0xb8,
	0x8f, 0x89, 0x20, 0xcf, 0x6d, 0xe1, 0xbd, 0x93, 0x93, 0xff, 0x98, 0x93, 0xe1, 0x1c, 0x5a, 0x41,
	0x62, 0xa4, 0x7e, 0x3b, 0x0e, 0x75, 0x29, 0x17, 0x7d, 0xc5, 0x32, 0x0b, 0xe7, 0xb5, 0x1c, 0xc3,
	0xf1, 0xba, 0xbe, 0xd0, 0xe8, 0x19, 0x0a, 0xe7, 0xe5, 0x1c, 0x76, 0x7d, 0xad, 0xc2, 0x6c, 0x88,
	0x2d, 0x3f, 0xb4, 0x69, 0xae, 0xef, 0xf4, 0x1c, 0x6a, 0xf6, 0xfc, 0x2c, 0x67, 0x38, 0xfc, 0xb6,
	0x04, 0xa3, 0x97, 0x61, 0x86, 0x1d, 0x7b, 0x02, 0xb3, 0x26, 0x69, 0x62, 0x37, 0x81, 0xb8, 0x0a,
	0xb3, 0x8f, 0xfb, 0x34, 0xf0, 0x59, 0x07, 0x66, 0x68, 0x5a, 0xc4, 0x8f, 0xab, 0x2a, 0x33, 0x0c,
	0xbe, 0x19, 0x83, 0xd1, 0x1b, 0x30, 0xcf, 0x51, 0x71, 0x64, 0x99, 0x41, 0xbc, 0x02, 0x87, 0xe2,
	0xd1, 0x7d, 0x8e, 0xcd, 0xde, 0x61, 0x93, 0x9b, 0x72, 0x0e, 0xa9, 0x50, 0xb7, 0xfc, 0x5e, 0x0f,
	0x7b, 0x24, 0x12, 0x8d, 0xd2, 0x78, 0x8c, 0x6e, 0xc2, 0x92, 0xe9, 0xba, 0xfe, 0x57, 0x06, 0x5b,
	0x69, 0x1b, 0x39, 0xe9, 0xf8, 0x13, 0x5c, 0x65, 0x48, 0x9f, 0x30, 0x1c, 0x3d, 0x2d, 0xa8, 0x7a,
	0x11, 0x1a, 0xf1, 0x39, 0xd2, 0x94, 0x27, 0x61, 0x90, 0xec, 0x5b, 0x3d, 0x03, 0xad, 0xe4, 0x49,
	0xa8, 0x7f, 0xaf, 0xc1, 0x5c, 0x81, 0x53, 0xa1, 0xcf, 0x01, 0xa8, 0xb5, 0x72, 0xd7, 0x12, 0xe6,
	0xfa, 0xdd, 0x93, 0x3b, 0x27, 0xb5, 0x57, 0x0e, 0xd6, 0xa9, 0xf5, 0xf3, 0x4f, 0xf4, 0x23, 0x68,
	0x32, 0x8b, 0x15, 0xd4, 0xb9, 0xc9, 0xbe, 0xfb, 0x1f, 0x50, 0xa7, 0xb2, 0x0a, 0xf2, 0xcc, 0x07,
	0xf8, 0xb7, 0xfa, 0x57, 0x05, 0x1a, 0x31, 0x63, 0x9a, 0xc0, 0xf1, 0x83, 0x62, 0x67, 0x1d, 0xc9,
	0x04, 0x8e, 0xc1, 0xb6, 0x18, 0xe8, 0xff, 0xd2, 0x94, 0xd4, 0xb7, 0x00, 0x86, 0xf2, 0x17, 0x8a,
	0xa0, 0x14, 0x8a, 0xa0, 0xad, 0x42, 0x9b, 0x6a, 0xd6, 0xc1, 0xf6, 0x2e, 0x09, 0x9d, 0x80, 0xfd,
	0xa4, 0x81, 0xe3, 0x44, 0xe2, 0x21, 0x2d, 0x87, 0x1b, 0xff, 0x58, 0x84, 0x56, 0xf2, 0x26, 0x45,
	0x5f, 0x40, 0x33, 0xf1, 0xd3, 0x0d, 0xf4, 0x42, 0xfe, 0xd0, 0xf2, 0x3f, 0x05, 0x51, 0x5f, 0x1c,
	0x81, 0x25, 0xde, 0x9a, 0x63, 0x48, 0x87, 0x69, 0xd1, 0xee, 0x47, 0xcb, 0xc7, 0xfc, 0x12, 0x80,
	0x53, 0xbd, 0x34, 0xf2, 0xb7, 0x02, 0xda, 0xd8, 0x35, 0x05, 0x79, 0x70, 0x36, 0xd7, 0x7d, 0x47,
	0x57, 0xf2, 0x6b, 0xcb, 0x7a, 0xfb, 0xea, 0x2b, 0x95, 0x70, 0x63, 0x19, 0x08, 0xcc, 0x15, 0xb4,
	0xd3, 0xd1, 0xab, 0x23, 0xa8, 0xa4, 0x5a, 0xfa, 0xea, 0xd5, 0x8a, 0xd8, 0x31, 0xd7, 0xc7, 0x80,
	0xf2, 0xbd, 0x76, 0xf4, 0xca, 0x48, 0x32, 0xc3, 0x5e, 0xbe, 0xfa, 0x6a, 0x35, 0xe4, 0x52, 0x41,
	0x79, 0x8f, 0x7d, 0xa4, 0xa0, 0xa9, 0x2e, 0xfe, 0x48, 0x41, 0x33, 0x8d, 0xfb, 0x31, 0x74, 0x08,
	0xb3, 0xd9, 0xfe, 0x3b, 0x5a, 0x2d, 0xfb, 0x9d, 0x50, 0xae, 0xbd, 0xaf, 0x5e, 0xa9, 0x82, 0x1a,
	0x33, 0xc3, 0x70, 0x26, 0xdd, 0xef, 0x46, 0x2f, 0xe7, 0xd7, 0x17, 0x76, 0xfc, 0xd5, 0x95, 0xd1,
	0x88, 0x49, 0x99, 0xb2, 0x3d, 0xf0, 0x22, 0x99, 0x4a, 0x1a, 0xec, 0x45, 0x32, 0x95, 0xb5, 0xd4,
	0xb5, 0x31, 0xf4, 0xb5, 0x6c, 0xac, 0x66, 0x7a, 0xc3, 0x68, 0xad, 0x8c, 0x4c, 0x71, 0x73, 0x5a,
	0x5d, 0xaf, 0x8c, 0x9f, 0xf0, 0xc6, 0x2f, 0xa0, 0x99, 0x68, 0x11, 0x17, 0xc5, 0x8f, 0x7c, 0xd3,
	0xb9, 0x28, 0x7e, 0x14, 0xf5, 0x99, 0xc7, 0xd0, 0x1e, 0xb4, 0x53, 0x4d, 0x63, 0xf4, 0x52, 0xd9,
	0xca, 0x74, 0x6d, 0x55, 0x7d, 0x79, 0x24, 0x5e, 0xcc, 0xc3, 0x90, 0x11, 0x51, 0x84, 0xc0, 0xd2,
	0xcd, 0xa5, 0x63, 0xe0, 0x4b, 0xa3, 0xd0, 0x52, 0xae, 0x9c, 0x6b, 0x2d, 0x17, 0xba, 0x72, 0x59,
	0xeb, 0xba, 0xd0, 0x95, 0xcb, 0xbb, 0xd5, 0x63, 0xe8, 0x00, 0x66, 0x32, 0x6d, 0x65, 0xb4, 0x52,
	0x46, 0x22, 0xdb, 0xd2, 0x56, 0x57, 0x2b, 0x60, 0xc6, 0x9c, 0x7e, 0x20, 0x2b, 0x10, 0xcc, 0xe4,
	0x2e, 0x97, 0x2f, 0x1d, 0xda, 0xd9, 0x0b, 0xc7, 0x23, 0xc5, 0xa4, 0xbf, 0x82, 0x73, 0x45, 0xd5,
	0x46, 0x74, 0xb5, 0xa8, 0xae, 0x51, 0x5a, 0xd2, 0x54, 0xd7, 0xaa, 0xa2, 0xc7, 0x8c, 0x3f, 0x85,
	0xba, 0x6c, 0xad, 0xa2, 0x82, 0x4b, 0x29, 0xd3, 0x8c, 0x56, 0xb5, 0xe3, 0x50, 0x12, 0xae, 0xd2,
	0x93, 0x51, 0x61, 0xd8, 0xf3, 0x2c, 0x8f, 0x0a, 0xb9, 0xee, 0x6c, 0x79, 0x54, 0xc8, 0xb7, 0x50,
	0x19, 0xbb, 0xd8, 0xec, 0x92, 0x2d, 0xc2, 0x72, 0xb3, 0x2b, 0xe8, 0x80, 0x96, 0x9b, 0x5d, 0x61,
	0xd7, 0x71, 0x0c, 0xfd, 0x58, 0xfe, 0x4c, 0x22, 0xdb, 0x19, 0x44, 0xa5, 0xb1, 0xa5, 0xa4, 0x43,
	0xa9, 0x5e, 0xab, 0xbe, 0x20, 0x66, 0xff, 0x54, 0x46, 0xc2, 0x4c, 0x67, 0xb0, 0x3c, 0x12, 0x16,
	0xf7, 0x27, 0xd5, 0xf5, 0xca, 0xf8, 0x79, 0x27, 0x4f, 0xb6, 0xce, 0xca, 0xb5, 0x5d, 0xd0, 0x6d,
	0x2c, 0xd7, 0x76, 0x61, 0x37, 0x8e, 0xf9, 0x47, 0x51, 0x5b, 0xac, 0xc8, 0x3f, 0x8e, 0xe9, 0xdb,
	0xa9, 0x6b, 0x55, 0xd1, 0x53, 0x89, 0x42, 0xbe, 0xef, 0x85, 0x46, 0xee, 0x3f, 0x75, 0x07, 0x5c,
	0xad, 0x88, 0x5d, 0x7e, 0xba, 0xf2, 0x4e, 0x18, 0x29, 0x40, 0xe6, 0x6e, 0x58, 0xaf, 0x8c, 0x1f,
	0xf3, 0x0e, 0xe4, 0x8f, 0x6e, 0x12, 0x3d, 0x2b, 0x74, 0x65, 0x04, 0x9d, 0x44, 0xcf, 0x4d, 0x7d,
	0xa5, 0x12, 0x6e, 0x91, 0xf7, 0x26, 0xbb, 0x48, 0xc7, 0xd9, 0x53, 0xae, 0xf5, 0x75, 0x9c, 0x3d,
	0x15, 0x34, 0xa6, 0x0a, 0xbc, 0x57, 0x36, 0x8f, 0x46, 0x7b, 0x6f, 0xa6, 0x89, 0x35, 0xda, 0x7b,
	0x73, 0x7d, 0xa9, 0x31, 0xf4, 0xb3, 0xe1, 0x8f, 0x31, 0xf2, 0x35, 0x58, 0xb4, 0x51, 0x1a, 0x8a,
	0x4a, 0x4b, 0xcf, 0xea, 0xeb, 0x27, 0x5a, 0x93, 0x50, 0xfe, 0x2f, 0x15, 0xd9, 0xd9, 0x2d, 0x2c,
	0x82, 0xa2, 0x37, 0x2a, 0x10, 0xce, 0xd5, 0x71, 0xd5, 0x37, 0x4f, 0xb8, 0xaa, 0xc8, 0x1a, 0x92,
	0xf5, 0xcf, 0x72, 0x6b, 0x28, 0xa8, 0xa1, 0x96, 0x5b, 0x43, 0x51, 0x49, 0x55, 0x1b, 0x43, 0xf7,
	0x61, 0x92, 0x3d, 0xd7, 0xd1, 0x85, 0xe3, 0xdf, 0xf1, 0xea, 0xc5, 0xe2, 0xf9, 0xf8, 0x35, 0x4a,
	0x05, 0xd8, 0x9b, 0x62, 0xff, 0x35, 0x78, 0xfd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x46, 0xc8,
	0xe1, 0xbc, 0x82, 0x30, 0x00, 0x00,
}
